# reusable-helm-deploy.yml
# This reusable workflow deploys an application to an AWS EKS Kubernetes cluster using a Helm chart.
# It uses OIDC for secure, keyless authentication to AWS and Kubernetes.
# REQ-1-021: Deploys to AWS EKS.
# REQ-1-089: Uses Helm for deployment orchestration.

name: 'Reusable Workflow: Helm Deploy to EKS'

on:
  workflow_call:
    inputs:
      service-name:
        description: 'The name of the service being deployed (e.g., iam-service).'
        required: true
        type: string
      helm-chart-path:
        description: 'The path to the Helm chart to be deployed.'
        required: true
        type: string
      namespace:
        description: 'The Kubernetes namespace to deploy into.'
        required: true
        type: string
      image-uri:
        description: 'The full URI of the Docker image to deploy.'
        required: true
        type: string
      environment:
        description: 'The target environment name (e.g., staging, production).'
        required: true
        type: string
      cluster-name:
        description: 'The name of the target AWS EKS cluster.'
        required: true
        type: string
      aws-region:
        description: 'The AWS region of the EKS cluster.'
        required: true
        type: string
    secrets:
      aws-role-to-assume:
        description: 'The ARN of the AWS IAM Role to assume for OIDC authentication.'
        required: true
    outputs:
      deployment-status:
        description: "The status of the Helm deployment ('succeeded' or 'failed')."
        value: ${{ jobs.deploy.outputs.deployment-status }}
      deployment-metadata:
        description: "JSON object containing deployment details like revision and namespace."
        value: ${{ jobs.deploy.outputs.deployment-metadata }}

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write # Required for OIDC authentication with AWS.
      contents: read   # Required to checkout the code.

    outputs:
      deployment-status: ${{ steps.helm-deploy.outcome }}
      deployment-metadata: ${{ steps.set-metadata.outputs.metadata }}
      
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials via OIDC'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.aws-role-to-assume }}
          aws-region: ${{ inputs.aws-region }}

      - name: 'Configure Kubectl for EKS'
        run: |
          aws eks update-kubeconfig --region ${{ inputs.aws-region }} --name ${{ inputs.cluster-name }}
          echo "Kubernetes context configured for cluster: ${{ inputs.cluster-name }}"
          kubectl config current-context

      - name: 'Set up Helm'
        uses: azure/setup-helm@v4
        with:
          version: 'v3.15.2' # Pinning to a specific version for stability

      - name: 'Lint Helm Chart'
        run: helm lint ${{ inputs.helm-chart-path }}

      - name: 'Deploy with Helm'
        id: helm-deploy
        run: |
          helm upgrade --install ${{ inputs.service-name }} ${{ inputs.helm-chart-path }} \
            --namespace ${{ inputs.namespace }} \
            --create-namespace \
            --set image.repository=${{ inputs.image-uri }} \
            --set image.tag=${{ github.sha }} \
            --set environment=${{ inputs.environment }} \
            --wait \
            --timeout 15m

      - name: 'Verify Helm Deployment'
        if: success()
        run: |
          echo "Deployment successful. Verifying with helm test..."
          helm test ${{ inputs.service-name }} --namespace ${{ inputs.namespace }}

      - name: 'Set Deployment Metadata Output'
        id: set-metadata
        if: success()
        run: |
          REVISION=$(helm history ${{ inputs.service-name }} --namespace ${{ inputs.namespace }} --max 1 -o json | jq -r '.[0].revision')
          METADATA=$(jq -n --arg rev "$REVISION" --arg ns "${{ inputs.namespace }}" --arg svc "${{ inputs.service-name }}" \
            '{revision: $rev, namespace: $ns, service: $svc}')
          echo "metadata=$METADATA" >> $GITHUB_OUTPUT