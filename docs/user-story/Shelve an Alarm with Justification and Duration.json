{'story_metadata': {'story_id': 'US-010', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Shelve an Alarm with Justification and Duration', 'as_a_user_story': 'As an Operator, I want to temporarily shelve an active alarm for a specific duration and provide a reason, so that I can perform planned maintenance or manage a known, temporary condition without being distracted by constant notifications, while ensuring the alarm automatically reactivates after the period.', 'user_persona': 'Operator (as defined in REQ-USR-001)', 'business_value': 'Reduces alarm fatigue for operators during known conditions (e.g., maintenance), improves focus on critical tasks, and maintains a compliant audit trail of all alarm management actions.', 'functional_area': 'Alarms and Events Monitoring', 'story_theme': 'Alarm Management Enhancements'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Happy Path: Operator shelves an active alarm with a pre-defined duration', 'scenario_type': 'Happy_Path', 'given': 'an Operator is logged in and viewing the active alarms list', 'when': "the Operator selects an active alarm, chooses the 'Shelve' action, selects a pre-defined duration of '30 minutes', enters 'Performing routine sensor calibration' as the justification, and confirms the action", 'then': "the alarm's status in the list immediately updates to 'Shelved' and is visually distinguished (e.g., different icon/color)", 'and': "a new entry is created in the audit trail containing the Operator's ID, the timestamp, alarm ID, a duration of 30 minutes, and the justification text, compliant with REQ-FR-005", 'validation_notes': 'Verify UI update in the alarm list. Query the audit trail database/API to confirm the log entry is created with all required fields.'}, {'criteria_id': 'AC-002', 'scenario': 'Happy Path: Shelved alarm automatically becomes active after duration expires', 'scenario_type': 'Happy_Path', 'given': 'an alarm has been shelved with a duration of 5 minutes', 'when': '5 minutes have passed since the shelving action', 'then': "the alarm's status automatically reverts to its previous state (e.g., 'Active')", 'and': "an 'Auto Un-shelved' event is logged in the audit trail for that alarm", 'validation_notes': 'This requires a time-based test. The test should shelve an alarm and wait for the duration to expire, then verify the UI and audit log are updated correctly without user interaction.'}, {'criteria_id': 'AC-003', 'scenario': 'Happy Path: Operator manually unshelves an alarm before duration expires', 'scenario_type': 'Happy_Path', 'given': "an alarm is in the 'Shelved' state", 'when': "the Operator selects the shelved alarm and chooses the 'Unshelve' action", 'then': "the alarm's status immediately reverts to its previous state (e.g., 'Active')", 'and': "a 'Manual Un-shelved' event is logged in the audit trail, including the Operator's ID", 'validation_notes': 'Verify the UI updates instantly. Check the audit log for the manual unshelve event.'}, {'criteria_id': 'AC-004', 'scenario': 'Error Condition: Operator attempts to shelve an alarm without justification', 'scenario_type': 'Error_Condition', 'given': "the Operator has opened the 'Shelve Alarm' dialog", 'when': 'they select a duration but leave the justification text field empty and attempt to confirm', 'then': "the system displays an inline validation error message stating 'Justification is required'", 'and': 'the alarm is not shelved and its state remains unchanged', 'validation_notes': 'Automated UI test to check for the presence and text of the error message.'}, {'criteria_id': 'AC-005', 'scenario': 'Error Condition: Operator attempts to shelve an alarm with an invalid custom duration', 'scenario_type': 'Error_Condition', 'given': "the Operator has opened the 'Shelve Alarm' dialog", 'when': "they enter '0' or a negative number in the custom duration field and attempt to confirm", 'then': "the system displays an inline validation error message stating 'Duration must be greater than zero'", 'and': 'the alarm is not shelved', 'validation_notes': "Test with multiple invalid inputs (0, -10, 'abc') to ensure robust validation."}, {'criteria_id': 'AC-006', 'scenario': 'UI Interaction: Tooltip on a shelved alarm displays details', 'scenario_type': 'Alternative_Flow', 'given': 'an alarm has been shelved by an Operator', 'when': "another user hovers their mouse over the shelved alarm's status icon", 'then': 'a tooltip appears displaying the user who shelved it, the justification provided, the total shelve duration, and the time remaining', 'validation_notes': 'E2E test to verify the tooltip appears and contains the correct dynamic data.'}], 'user_interface_requirements': {'ui_elements': ["A 'Shelve' option in the alarm action menu (e.g., right-click context menu or action bar button).", 'A modal dialog for shelving an alarm with fields for: pre-defined duration options (e.g., 15m, 30m, 1h, 8h), a custom duration input, and a mandatory text area for justification.', "A distinct icon and/or row color in the alarm list to indicate the 'Shelved' state.", "An 'Unshelve' option in the action menu for alarms that are currently shelved.", 'A tooltip to display shelving details on hover.'], 'user_interactions': ["User selects an alarm and clicks 'Shelve'.", "User fills out the shelve dialog and clicks 'Confirm'.", 'User can cancel the shelve dialog without making changes.', 'User hovers over a shelved alarm to see details.', "User selects a shelved alarm and clicks 'Unshelve'."], 'display_requirements': ['The alarm list must update in real-time for all connected clients when an alarm is shelved or unshelved.', 'The remaining shelve time should be accessible, either in a column or in the tooltip.'], 'accessibility_needs': ['The shelve dialog must be fully keyboard navigable.', "The 'Shelved' state must be communicated to screen readers, not just by color alone (e.g., using aria-label).", 'All form fields must have associated labels.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'A justification is mandatory for shelving any alarm.', 'enforcement_point': 'Server-side validation upon receiving the shelve request.', 'violation_handling': "The request is rejected with a '400 Bad Request' error and a clear message. The UI must handle this gracefully."}, {'rule_id': 'BR-002', 'rule_description': "Only users with the 'Operator' role or higher can shelve or unshelve alarms.", 'enforcement_point': 'API Gateway and backend service authorization middleware.', 'violation_handling': "The request is rejected with a '403 Forbidden' error."}, {'rule_id': 'BR-003', 'rule_description': 'All shelve and unshelve actions must be recorded in the immutable audit trail.', 'enforcement_point': 'Within the business logic of the alarm management service.', 'violation_handling': 'If the audit log entry cannot be created, the entire transaction must be rolled back, and the alarm shelving action must fail.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-007', 'dependency_reason': 'Requires the alarm list UI to be implemented to select an alarm.'}, {'story_id': 'US-014', 'dependency_reason': 'Requires the audit trail system to be in place to log the shelving action as per REQ-FR-005.'}, {'story_id': 'US-048', 'dependency_reason': 'Requires the Role-Based Access Control (RBAC) system to be functional to enforce permissions.'}], 'technical_dependencies': ['A backend Alarm Management service capable of managing alarm states.', 'A reliable, persistent, server-side scheduling mechanism (e.g., Hangfire, Quartz.NET) to handle automatic unshelving.', 'A real-time communication channel (e.g., SignalR) to push state updates to clients.'], 'data_dependencies': ['The database schema for alarms must be extended to include fields for `is_shelved`, `shelved_by_user_id`, `shelve_end_time`, and `shelve_justification`.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The UI update after shelving/unshelving an alarm must be reflected for all users within 500ms.', 'The server-side scheduler must be capable of managing timers for at least 10,000 concurrent shelved alarms per tenant.'], 'security': ['Backend must re-validate user permissions before executing the shelve/unshelve action.', 'Justification text input must be sanitized to prevent cross-site scripting (XSS) attacks.'], 'usability': ['The process of shelving an alarm should take no more than 3 clicks and text entry.', 'Pre-defined duration options should cover common use cases to minimize typing.'], 'accessibility': ['Must comply with WCAG 2.1 Level AA standards as per REQ-IFC-001.'], 'compatibility': ['Functionality must work consistently across all supported browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Implementation of a robust, persistent server-side scheduler for automatic unshelving is non-trivial and must handle application restarts.', 'Managing the alarm state machine (Active, Acknowledged, Shelved) requires careful design to prevent race conditions.', 'Ensuring the atomicity of the operation (updating alarm state AND writing to audit log) is critical.'], 'technical_risks': ['The scheduler service could become a performance bottleneck if not designed to scale.', "Time synchronization between the server and clients could cause minor discrepancies in displaying 'time remaining', though the server's clock must be the source of truth for unshelving."], 'integration_points': ['Alarm Management Service', 'Audit Trail Service', 'User Authentication/Authorization Service (Keycloak)', 'Frontend Real-time Notification Service (SignalR)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security'], 'test_scenarios': ['Verify an operator can shelve an alarm.', 'Verify a viewer cannot shelve an alarm.', 'Verify the alarm automatically unshelves after the exact duration.', 'Verify manual unshelving works correctly.', 'Verify the audit log contains all required information for each action.', 'Verify UI updates correctly for multiple concurrent users viewing the same alarm list.'], 'test_data_needs': ["User accounts with 'Operator' and 'Viewer' roles.", 'A set of active alarms in the system to interact with.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E tests.', 'A tool to inspect WebSocket/SignalR messages for real-time updates.']}, 'definition_of_done': ['All acceptance criteria validated and passing in the staging environment.', 'Code has been peer-reviewed and merged into the main branch.', 'Unit test coverage for new logic is at or above 80%.', 'Integration tests for the scheduler and audit log interaction are implemented and passing.', 'E2E automated tests for the happy paths (shelve, auto-unshelve, manual-unshelve) are created and passing.', 'UI has been reviewed by a UX designer and approved.', 'Security checks for input sanitization and authorization have been validated.', 'User documentation for the alarm shelving feature has been created or updated.', 'Story has been successfully deployed and verified in the staging environment.'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This story has significant backend complexity due to the scheduler. It may require pairing a backend and frontend developer for the duration of the story.', 'The prerequisite stories (US-007, US-014) must be completed and merged before this story can be started.'], 'release_impact': 'This is a key feature for operational users and a major improvement in alarm management functionality. It should be highlighted in release notes.'}}