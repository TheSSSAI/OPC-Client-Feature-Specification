{'story_metadata': {'story_id': 'US-049', 'elaboration_date': '2025-01-26', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Customize Role Permissions with Granular Functional and Asset-Based Scoping', 'as_a_user_story': 'As an Administrator, I want to create and customize roles with granular permissions tied to specific system functions and asset hierarchies, so that I can enforce the principle of least privilege and precisely tailor user access to match their specific job responsibilities.', 'user_persona': 'Administrator, as defined in REQ-USR-001, responsible for system setup, user management, and security configuration.', 'business_value': 'Enhances security by enabling the principle of least privilege. Increases operational efficiency by providing users with access only to the tools and data relevant to their roles. Supports compliance with stringent internal and external security policies.', 'functional_area': 'User and Access Management', 'story_theme': 'Advanced Security and Compliance'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Create a new custom role with specific functional and asset-scoped permissions', 'scenario_type': 'Happy_Path', 'given': "I am an Administrator logged into the Central Management Plane and navigating to the 'Roles and Permissions' section", 'when': "I initiate the 'Create Role' workflow, provide a unique name 'Maintenance Tech' and a description, select the 'Acknowledge Alarms' and 'Write to Tags' permissions, and scope these permissions to the 'Site B > Production Line 3' node in the asset hierarchy", 'then': "A new custom role named 'Maintenance Tech' is successfully created and appears in the list of roles, visually distinct from default system roles.", 'validation_notes': "Verify the new role exists in the database with the correct permission and asset scope mappings. A user assigned this role should be able to write to tags only on assets under 'Line 3' and nowhere else."}, {'criteria_id': 'AC-002', 'scenario': 'Edit an existing custom role to modify its permissions', 'scenario_type': 'Happy_Path', 'given': "A custom role named 'Maintenance Tech' exists", 'when': "I select the 'Maintenance Tech' role, enter the edit mode, add the 'View Audit Trails' permission, and save the changes", 'then': "The role's permissions are updated, and this change is immediately effective for all users assigned to this role.", 'validation_notes': 'Verify the change is logged in the audit trail (REQ-FR-005), including the previous and new permission sets. Users with this role should now be able to access the audit trail viewer.'}, {'criteria_id': 'AC-003', 'scenario': 'Clone an existing role to use as a template', 'scenario_type': 'Happy_Path', 'given': "I am on the 'Roles and Permissions' page", 'when': "I select the default 'Operator' role and use the 'Clone' action, providing a new name 'Junior Operator'", 'then': "A new editable, custom role named 'Junior Operator' is created with an identical set of permissions as the original 'Operator' role.", 'validation_notes': "Verify the new role is created and is independent of the original. Changes to 'Junior Operator' should not affect the default 'Operator' role."}, {'criteria_id': 'AC-004', 'scenario': 'Attempt to delete a custom role that is currently assigned to users', 'scenario_type': 'Error_Condition', 'given': "A custom role 'Intern' is assigned to at least one active user", 'when': "I attempt to delete the 'Intern' role", 'then': "The system prevents the deletion and displays a user-friendly error message stating 'This role cannot be deleted because it is assigned to one or more users.'", 'validation_notes': 'The error message should ideally provide a link or instructions on how to reassign the affected users before the role can be deleted.'}, {'criteria_id': 'AC-005', 'scenario': 'Attempt to modify or delete a default system role', 'scenario_type': 'Edge_Case', 'given': "I am on the 'Roles and Permissions' page", 'when': "I select a default, non-customizable role such as 'Administrator' or 'Viewer'", 'then': "The UI controls for 'Edit Permissions' and 'Delete' are disabled or hidden for that role, preventing modification.", 'validation_notes': "Confirm that only the 'Clone' action is available for default roles. Direct API calls to modify or delete default roles should be rejected with a '403 Forbidden' status."}, {'criteria_id': 'AC-006', 'scenario': 'Delete an unassigned custom role', 'scenario_type': 'Happy_Path', 'given': "A custom role 'Temporary Contractor' exists and is not assigned to any users", 'when': 'I select the role and initiate the delete action, and confirm the action in a confirmation dialog', 'then': 'The role is permanently removed from the system and the action is logged in the audit trail.', 'validation_notes': 'Verify the role is removed from the roles list in the UI and deleted from the database.'}], 'user_interface_requirements': {'ui_elements': ['A main view listing all roles, distinguishing between default and custom roles.', "Buttons for 'Create Role', 'Edit', 'Clone', and 'Delete'.", 'A modal or dedicated page for role creation/editing.', "A multi-select list or tree of checkboxes for assigning functional permissions, grouped by category (e.g., 'Data Access', 'Alarming', 'Administration').", 'An interactive tree view of the Asset Hierarchy (from REQ-FR-021) to select the scope for permissions.'], 'user_interactions': ['Administrator can filter or search the list of roles.', 'Selecting a permission category expands to show granular permissions.', 'Selecting a node in the asset hierarchy tree automatically selects all its children, with the option to deselect individual children.'], 'display_requirements': ["The role creation form must clearly separate the role's name/description from its permission assignments.", 'When editing a role, currently assigned permissions and scopes must be clearly displayed.'], 'accessibility_needs': ['All UI controls must be keyboard-navigable and have appropriate ARIA labels, compliant with WCAG 2.1 Level AA (REQ-IFC-001).']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'Default system roles (Administrator, Data Scientist, Engineer, Operator, Viewer) are immutable and cannot be deleted or have their base permissions altered.', 'enforcement_point': 'API and UI layer.', 'violation_handling': 'UI controls are disabled. API requests to modify/delete are rejected with a 403 error.'}, {'rule_id': 'BR-002', 'rule_description': 'A custom role cannot be deleted if it is currently assigned to any user.', 'enforcement_point': 'Backend service logic before database deletion.', 'violation_handling': 'The operation is blocked, and an error message is returned to the user.'}, {'rule_id': 'BR-003', 'rule_description': 'All modifications to role definitions (create, update, delete) must be recorded in the system audit trail.', 'enforcement_point': 'Backend service logic after a successful database transaction.', 'violation_handling': 'If logging fails, the transaction should ideally be rolled back, or a high-priority system alert should be generated.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-047', 'dependency_reason': 'Requires the basic user creation functionality to exist.'}, {'story_id': 'US-048', 'dependency_reason': 'The full value is realized when these custom roles can be assigned to users.'}, {'story_id': 'US-025', 'dependency_reason': 'Critically dependent on the Asset Hierarchy feature for scoping permissions to plant areas.'}], 'technical_dependencies': ['A defined list of all possible granular permissions in the system.', 'Integration with the Identity Provider (Keycloak, REQ-NFR-003) to propagate role information.', 'A functioning Audit Trail service (REQ-FR-005) to log all changes.'], 'data_dependencies': ['Requires access to the Asset Hierarchy data model to populate the scoping UI.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['Loading the roles list should take less than 2 seconds for up to 500 roles.', 'The permission check performed by the API gateway or middleware for each authorized API call must add less than 10ms of latency.'], 'security': ["Only users with the 'Administrator' role can access this feature.", "Changes to a role's permissions must take effect immediately, invalidating any existing sessions or tokens if necessary to prevent privilege retention.", 'All role management API endpoints must be protected against unauthorized access.'], 'usability': ['The interface for managing a large number of permissions must be clear and not overwhelming.'], 'accessibility': ['Must adhere to WCAG 2.1 Level AA standards as per REQ-IFC-001.'], 'compatibility': ['The feature must function correctly on all supported web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'High', 'complexity_factors': ['Deep integration with the core authentication and authorization systems (Keycloak, JWTs).', 'Requires a robust and flexible data model for storing roles, permissions, and resource scopes.', 'The permission-checking logic will be executed on nearly every API call, making its performance critical.', 'Complex UI for managing a matrix of permissions against a hierarchical asset structure.'], 'technical_risks': ['Risk of misconfiguration leading to security vulnerabilities (privilege escalation).', 'Performance degradation if the permission-checking logic is not highly optimized and cached.', 'Complexity in ensuring that permission changes are propagated and enforced across all microservices instantly.'], 'integration_points': ['Identity Provider (Keycloak): For role definition and membership.', 'API Gateway (Kong): For enforcing permissions on incoming requests.', 'All Backend Microservices: To perform fine-grained checks where necessary.', 'Audit Trail Service: To log all changes.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security', 'Performance'], 'test_scenarios': ['Verify a user with a custom role can only access the functions and asset data they are explicitly granted.', "Verify a user is denied access when trying to perform an action or view data outside their role's scope.", 'Test the full CRUD lifecycle of a custom role (Create, Read, Update, Delete).', 'Test the cloning of both default and custom roles.', 'Security testing must attempt to bypass permissions by manipulating API calls.'], 'test_data_needs': ['A pre-populated asset hierarchy with multiple levels.', 'Multiple test user accounts that can be assigned different roles.', 'A set of default and custom roles for testing.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E testing of the UI workflow.', 'A JWT inspection tool to verify token claims after role changes.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by team', 'Unit tests implemented and passing with >80% coverage for new logic', 'Integration testing completed successfully, verifying API and database interactions', 'E2E tests for creating, editing, and assigning a role are automated and passing', 'Permission enforcement is verified via automated tests for both allowed and denied scenarios', 'Performance of the permission check mechanism is benchmarked and meets requirements', 'Security review completed, with focus on preventing privilege escalation', 'Administrator documentation for this feature is written and reviewed', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '13', 'priority': 'High', 'sprint_considerations': ['This is a foundational security feature and may require significant backend and frontend collaboration.', 'Dependent stories (US-025) must be completed before work can begin.', 'Requires a clear definition of all system-wide permissions before implementation.'], 'release_impact': ['Enables the product to be sold to customers with advanced or custom security requirements.', 'This is a major feature for compliance-focused industries.']}}