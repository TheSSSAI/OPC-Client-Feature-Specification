{'story_metadata': {'story_id': 'US-060', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Bulk Import Users via CSV Upload', 'as_a_user_story': 'As an Administrator, I want to upload a CSV file containing a list of new users with their details (like name, email, and initial roles) so that I can efficiently create multiple user accounts at once, significantly speeding up the setup process for a new site or a large group of users.', 'user_persona': 'Administrator, as defined in REQ-USR-001. This user is responsible for system setup and user management within their tenant.', 'business_value': 'Reduces administrative overhead by automating user creation. Improves operational efficiency and scalability, especially during new site onboarding. Minimizes manual data entry errors.', 'functional_area': 'User Management', 'story_theme': 'System Administration & Onboarding'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful import of a correctly formatted CSV file', 'scenario_type': 'Happy_Path', 'given': "The Administrator is logged in and navigates to the User Management page's 'Bulk Import' section", 'when': 'They upload a valid CSV file containing 10 new, unique users with all required fields correctly populated', 'then': 'The system accepts the file and initiates an asynchronous import process', 'and': "The 10 new users are visible in the user list and are correctly associated with the Administrator's tenant", 'validation_notes': 'Verify user creation in the database and via the Keycloak Admin Console. Check that users are assigned to the correct tenant.'}, {'criteria_id': 'AC-002', 'scenario': 'Provide a downloadable CSV template', 'scenario_type': 'Alternative_Flow', 'given': "The Administrator is on the 'Bulk Import' page", 'when': "They click the 'Download Template' link or button", 'then': "A CSV file named 'user_import_template.csv' is downloaded to their local machine", 'and': "The file contains the required headers: 'firstName', 'lastName', 'email', 'roles' (comma-separated for multiple roles)", 'validation_notes': 'Verify the downloaded file exists and contains the correct headers.'}, {'criteria_id': 'AC-003', 'scenario': 'Attempt to upload an incorrect file type', 'scenario_type': 'Error_Condition', 'given': "The Administrator is on the 'Bulk Import' page", 'when': "They attempt to upload a file that is not a CSV (e.g., 'users.xlsx', 'photo.jpg')", 'then': 'The system immediately rejects the file upload', 'and': "A validation error message is displayed on the UI: 'Invalid file format. Please upload a CSV file.'", 'validation_notes': 'Test with multiple non-CSV file extensions.'}, {'criteria_id': 'AC-004', 'scenario': 'Upload a CSV with missing or incorrect headers', 'scenario_type': 'Error_Condition', 'given': "The Administrator is on the 'Bulk Import' page", 'when': "They upload a CSV file that is missing the required 'email' header", 'then': 'The system rejects the file before processing any rows', 'and': "An error message is displayed: 'Invalid CSV headers. The following required columns are missing: email.'", 'validation_notes': 'Test with various missing headers and misspelled headers.'}, {'criteria_id': 'AC-005', 'scenario': 'Import with partial success due to invalid data in rows', 'scenario_type': 'Error_Condition', 'given': 'The Administrator uploads a CSV with 10 rows where 8 are valid, 1 has an invalid email format, and 1 specifies a non-existent role', 'when': 'The import process completes', 'then': "A summary report is generated and displayed, showing '8 users successfully created, 2 failures'", 'and': "The report provides a downloadable log detailing each failure with its row number and a clear reason (e.g., 'Row 5: Invalid email format', 'Row 9: Role 'InvalidRole' does not exist')", 'validation_notes': 'Verify that only the 8 valid users were created. Check the content and format of the error log.'}, {'criteria_id': 'AC-006', 'scenario': 'Import containing users who already exist', 'scenario_type': 'Error_Condition', 'given': "A user with email 'existing.user@company.com' already exists in the tenant", 'when': "The Administrator uploads a CSV that includes a row for 'existing.user@company.com'", 'then': 'The system skips creating this user and does not modify the existing account', 'and': "The summary report logs this as a failure with the reason 'Row 3: User with this email already exists.'", 'validation_notes': "Confirm that the existing user's data remains unchanged after the import."}, {'criteria_id': 'AC-007', 'scenario': 'Asynchronous processing for large files', 'scenario_type': 'Happy_Path', 'given': "The Administrator is on the 'Bulk Import' page", 'when': 'They upload a large CSV file (e.g., 500+ users)', 'then': 'The UI is not blocked, and the Administrator can navigate away from the import page', 'and': 'An in-app notification is sent to the Administrator upon completion of the import process, with a link to the summary report', 'validation_notes': 'Monitor system performance during the import. Verify the UI remains responsive and the notification is received.'}], 'user_interface_requirements': {'ui_elements': ["A dedicated section or modal for 'Bulk User Import' within the User Management area.", "A file input control ('Upload CSV') that filters for '.csv' files.", "A prominent link or button to 'Download Template'.", 'A status indicator for when an import is in progress.', 'A results area to display the summary report after import completion.', 'A link within the summary report to download a detailed error log if failures occurred.'], 'user_interactions': ['User clicks to select a file from their local system.', 'The system provides immediate feedback on file type and header validation.', 'The import process runs in the background, allowing the user to continue working.', 'User receives a notification when the process is complete.'], 'display_requirements': ['The summary report must clearly state the number of successful creations and the number of failures.', 'Error messages must be user-friendly and specific.'], 'accessibility_needs': ['All UI elements must be keyboard-navigable.', 'File upload status and final results must be announced by screen readers.', 'Complies with WCAG 2.1 Level AA standards as per REQ-IFC-001.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'User email addresses must be unique within a tenant.', 'enforcement_point': 'During the validation phase of the import process for each row.', 'violation_handling': 'The row is skipped, and an error is logged in the summary report. The existing user account is not modified.'}, {'rule_id': 'BR-002', 'rule_description': "All roles specified in the 'roles' column of the CSV must be valid, existing roles within the system.", 'enforcement_point': 'During the validation phase of the import process for each row.', 'violation_handling': 'The row is skipped, and an error is logged, specifying the invalid role name.'}, {'rule_id': 'BR-003', 'rule_description': 'The import process is strictly additive; it can only create new users, not update existing ones.', 'enforcement_point': 'System design and implementation of the import logic.', 'violation_handling': 'Rows with existing user emails are treated as errors and skipped.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-047', 'dependency_reason': 'The core service/logic for creating a single user account must exist before a bulk creation feature can be built upon it.'}, {'story_id': 'US-048', 'dependency_reason': "The mechanism for assigning roles to a user must be implemented to handle the 'roles' column in the CSV."}], 'technical_dependencies': ['A backend API endpoint for secure file uploads.', 'An asynchronous job queueing system (e.g., RabbitMQ, Hangfire, AWS SQS) for processing.', 'Integration with the Identity Provider (Keycloak) Admin API for user creation (as per REQ-ARC-002).', 'A robust CSV parsing library for .NET.', 'An in-app notification system.'], 'data_dependencies': ['Access to a definitive list of valid user roles for validation purposes.'], 'external_dependencies': ['The Keycloak Identity Provider must be running and accessible by the backend service.']}, 'non_functional_requirements': {'performance': ['The import of a CSV file with 1,000 users should be processed in under 2 minutes.', 'File upload should not block the web server thread; processing must be asynchronous.'], 'security': ["Only users with the 'Administrator' role can access this feature (enforced via RBAC).", 'The file upload endpoint must be secured against common vulnerabilities (e.g., path traversal, large file DoS).', "All created users must be automatically associated with the uploading Administrator's tenant, enforcing data isolation (REQ-CON-001)."], 'usability': ['The required CSV format must be clearly documented and an example template easily accessible.', 'Error feedback must be clear, specific, and actionable.'], 'accessibility': ['Must meet WCAG 2.1 Level AA standards.'], 'compatibility': ['The feature must function correctly on all supported browsers (Chrome, Firefox, Edge, Safari) as per REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Implementation of a robust asynchronous background processing job.', 'Need for detailed, row-by-row validation and error reporting.', 'Secure integration with the external Keycloak Admin API.', 'Handling of file streams and potential for large file sizes.'], 'technical_risks': ['The Keycloak Admin API may have rate limits that need to be handled.', 'Improper handling of file parsing could lead to performance issues or security vulnerabilities.', 'Failure in the background job could leave the import in an inconsistent state if not handled gracefully.'], 'integration_points': ['Frontend UI -> Backend File Upload API', 'Backend API -> Asynchronous Job Queue', 'Job Processor -> User Service', 'User Service -> Keycloak Admin API', 'Job Processor -> Notification Service']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Performance', 'Security'], 'test_scenarios': ['Upload a perfectly valid CSV.', 'Upload a CSV with mixed valid and invalid rows.', 'Upload a CSV where all rows are invalid for different reasons.', 'Upload an empty CSV and a CSV with only headers.', 'Attempt upload by a non-Administrator user.', 'Test performance with a CSV of 1,000+ users.'], 'test_data_needs': ['A set of pre-defined CSV files for all test scenarios.', 'A clean tenant environment for each test run to avoid conflicts with existing users.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E testing.', 'A load testing tool (e.g., k6, JMeter) for performance validation.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two peers', 'Unit and integration tests implemented with >80% code coverage for new logic', 'E2E tests for happy path and key error conditions are automated and passing', 'Performance testing with a large file confirms NFRs are met', 'Security review of the file upload endpoint and processing logic is complete', 'User-facing documentation (CSV format, feature usage) is created and published', 'Story deployed and verified in the staging environment by QA'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['Requires the availability of the asynchronous job processing infrastructure. If not present, it must be built first or as part of this sprint.', 'Requires configured credentials and network access to the Keycloak Admin API from the backend environment.'], 'release_impact': 'High impact for new customer onboarding. This is a key feature for making the product scalable for enterprise clients.'}}