{'story_metadata': {'story_id': 'US-025', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Create and Manage Asset Hierarchy', 'as_a_user_story': 'As an Engineer, I want to create, view, modify, and delete assets within a flexible hierarchical structure that represents my physical plant, so that I can provide essential physical context to raw data, enabling more intuitive navigation, targeted analysis, and the foundation for advanced features like contextual dashboards and AI model assignments.', 'user_persona': 'Engineer. This user is responsible for the technical configuration of the system, including modeling the physical plant and its equipment to provide context for operational data.', 'business_value': 'Provides the foundational contextual model for all plant data. This hierarchy transforms a flat list of tags into a meaningful representation of the physical plant, which is critical for contextual analysis, reporting (OEE), AI model assignment, AR overlays, and granular security. It directly supports REQ-FR-021 and REQ-CON-004 (ISA-95 compatibility).', 'functional_area': 'Asset Management', 'story_theme': 'Core System Configuration'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Create a root-level asset', 'scenario_type': 'Happy_Path', 'given': 'The Engineer is viewing the Asset Management module and no root asset exists', 'when': "The Engineer initiates the creation of a new asset at the top level, provides a valid name (e.g., 'Houston Site'), and saves it", 'then': "The new asset 'Houston Site' appears as a root node in the asset tree view.", 'validation_notes': 'Verify via UI and by checking the database that a new asset record is created with a null parent_id.'}, {'criteria_id': 'AC-002', 'scenario': 'Create a child asset under an existing parent', 'scenario_type': 'Happy_Path', 'given': "A parent asset named 'Houston Site' exists in the hierarchy", 'when': "The Engineer selects 'Houston Site', chooses the 'Add Child Asset' action, provides a valid name (e.g., 'Mixing Area'), and saves it", 'then': "The new asset 'Mixing Area' appears as a direct child of 'Houston Site' in the asset tree view.", 'validation_notes': "Verify via UI that the tree visually represents the parent-child relationship. Verify in the database that the new asset's parent_id points to the 'Houston Site' asset's ID."}, {'criteria_id': 'AC-003', 'scenario': 'Rename an existing asset', 'scenario_type': 'Happy_Path', 'given': "An asset named 'Mixing Area' exists", 'when': "The Engineer selects the 'Rename' action for 'Mixing Area', enters a new valid name 'Polymerization Area', and saves the change", 'then': "The asset's name is updated to 'Polymerization Area' in the tree view and any detail panels.", 'validation_notes': 'Verify the name change is reflected in the UI and persisted in the database.'}, {'criteria_id': 'AC-004', 'scenario': 'Move an asset (and its children) to a new parent', 'scenario_type': 'Happy_Path', 'given': "The hierarchy contains 'Area 1 > Line A' and a separate 'Area 2'", 'when': "The Engineer drags the 'Line A' asset and drops it onto the 'Area 2' asset", 'then': "The 'Line A' asset (and its entire sub-tree) is now a child of 'Area 2' and is no longer a child of 'Area 1'.", 'validation_notes': "Verify the UI visually updates the tree structure. Verify in the database that the parent_id for 'Line A' has been updated to the ID of 'Area 2'."}, {'criteria_id': 'AC-005', 'scenario': 'Delete a leaf asset (no children)', 'scenario_type': 'Happy_Path', 'given': "An asset named 'Pump-101' exists and has no child assets", 'when': "The Engineer selects the 'Delete' action for 'Pump-101' and confirms the action in a confirmation dialog", 'then': "The 'Pump-101' asset is permanently removed from the hierarchy.", 'validation_notes': 'Verify the asset is removed from the UI and the corresponding record is deleted from the database.'}, {'criteria_id': 'AC-006', 'scenario': 'Delete a parent asset with its entire sub-tree', 'scenario_type': 'Happy_Path', 'given': "An asset 'Line A' exists with child assets 'Machine 1' and 'Machine 2'", 'when': "The Engineer selects the 'Delete' action for 'Line A'", 'then': "A confirmation dialog appears with a clear warning: 'This will permanently delete Line A and all of its 2 child assets. Are you sure?'", 'and': "After the Engineer confirms, 'Line A', 'Machine 1', and 'Machine 2' are all removed from the hierarchy.", 'validation_notes': 'Verify the warning message is specific. Verify all assets in the sub-tree are removed from the UI and database after confirmation.'}, {'criteria_id': 'AC-007', 'scenario': 'Attempt to create an asset with a duplicate name under the same parent', 'scenario_type': 'Error_Condition', 'given': "An asset named 'Line A' already exists under the parent 'Area 1'", 'when': "The Engineer attempts to create another asset named 'Line A' under 'Area 1'", 'then': "The system prevents the creation and displays a user-friendly validation error: 'Asset name must be unique for each item under the same parent.'", 'validation_notes': 'Verify that no new record is created in the database.'}, {'criteria_id': 'AC-008', 'scenario': 'Attempt to create or rename an asset with an empty name', 'scenario_type': 'Error_Condition', 'given': 'The Engineer is in the process of creating or renaming an asset', 'when': 'The Engineer enters an empty or whitespace-only name and attempts to save', 'then': "The system prevents the save and displays a validation error: 'Asset name cannot be empty.'", 'validation_notes': 'Verify the save button is disabled or an error message is shown upon attempting to save.'}, {'criteria_id': 'AC-009', 'scenario': 'Attempt to delete an asset with mapped tags', 'scenario_type': 'Edge_Case', 'given': "An asset 'Pump-101' has 5 OPC tags mapped to it (as per US-026)", 'when': "The Engineer attempts to delete 'Pump-101'", 'then': "The confirmation dialog includes a specific warning: 'This asset has 5 tags mapped to it. Deleting the asset will unmap these tags.'", 'and': 'Upon confirmation, the asset is deleted and the association between the 5 tags and the deleted asset is removed.', 'validation_notes': 'This requires coordination with the implementation of US-026. The test should verify that the foreign key reference in the tags table is set to null.'}], 'user_interface_requirements': {'ui_elements': ['A collapsible tree view component to display the hierarchy.', "Buttons/context menu items for 'Add Child Asset', 'Rename', 'Delete'.", 'A modal dialog for creating/editing asset properties (e.g., name, type).', 'Confirmation dialogs for destructive actions like deletion.', 'A search/filter bar to quickly find assets within a large tree.'], 'user_interactions': ['Users can expand and collapse parent nodes in the tree.', 'Users can select an asset by clicking on it.', 'Users can right-click an asset to open a context menu with available actions.', 'Users can drag and drop an asset onto another asset to change its parent.'], 'display_requirements': ['The hierarchy must be displayed in a logical, nested structure.', 'The currently selected asset should be visually highlighted.', 'The UI must provide clear feedback during drag-and-drop operations (e.g., highlighting the potential drop target).'], 'accessibility_needs': ['The tree view must be navigable using a keyboard (arrow keys to navigate, enter to select, etc.).', 'All interactive elements (buttons, menu items) must have accessible labels for screen readers.', 'The UI must comply with WCAG 2.1 Level AA standards for color contrast and focus indicators.']}, 'business_rules': [{'rule_id': 'BR-ASSET-001', 'rule_description': 'Asset names must be unique among siblings (i.e., under the same immediate parent).', 'enforcement_point': 'On creation and renaming of an asset.', 'violation_handling': 'Prevent the operation and display a validation error to the user.'}, {'rule_id': 'BR-ASSET-002', 'rule_description': 'Deleting a parent asset results in the recursive deletion of all its descendant assets.', 'enforcement_point': 'On deletion of an asset that has one or more children.', 'violation_handling': 'A specific, explicit confirmation warning must be displayed to the user before the operation is executed.'}, {'rule_id': 'BR-ASSET-003', 'rule_description': 'An asset cannot be its own ancestor (i.e., creating circular dependencies is forbidden).', 'enforcement_point': 'On moving an asset to a new parent.', 'violation_handling': 'The system must prevent any move operation where the target parent is a descendant of the asset being moved and display an error.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-049', 'dependency_reason': "The system needs a defined 'Engineer' role with permissions to create, edit, and delete assets before this functionality can be securely exposed."}], 'technical_dependencies': ['A database schema capable of efficiently storing and querying hierarchical data (e.g., using Adjacency List with Recursive CTEs, Path Enumeration, or Closure Table).', 'Backend REST API endpoints for all CRUD and move operations on assets.', 'A frontend UI component library with a performant and accessible Tree View component.', 'The core authentication/authorization service to enforce role-based access.'], 'data_dependencies': ['Tenant context is required for all operations to ensure data isolation as per REQ-CON-001.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The asset tree UI must render within 2 seconds for a hierarchy of up to 1,000 assets.', 'API response time for fetching the entire asset tree (for up to 1,000 assets) must be under 500ms (P95).', 'For hierarchies larger than 1,000 assets, the UI must implement lazy loading of branches to maintain responsiveness.'], 'security': ["All API endpoints for managing assets must be protected and require an authenticated user with the 'Engineer' or 'Administrator' role.", "All operations must be scoped to the user's tenant to enforce multi-tenancy data isolation.", 'All asset creation, modification, and deletion events must be logged in the audit trail (REQ-FR-005).'], 'usability': ['The process of building and modifying the hierarchy should be intuitive, with drag-and-drop being the primary method for re-organization.', 'Error messages must be clear and guide the user on how to correct the issue.'], 'accessibility': ['Must meet WCAG 2.1 Level AA standards.'], 'compatibility': ['The Asset Management UI must function correctly on all supported web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Database schema design for hierarchical data is a classic challenge with trade-offs between write performance and read (query) performance. The chosen approach (e.g., Path Enumeration) needs careful consideration.', 'Implementing a performant, accessible, and user-friendly drag-and-drop tree interface on the frontend can be complex.', 'Ensuring transactional integrity for complex operations like moving or deleting large sub-trees.'], 'technical_risks': ['Poor database schema choice could lead to performance bottlenecks as the hierarchy grows.', 'The frontend tree component could become slow and unresponsive with very large asset models if not implemented with virtualization or lazy loading.'], 'integration_points': ['This module will be the source of truth for assets used in Tag Mapping (US-026), AI Model Assignment (US-032), and AR Configuration (US-042).', 'The Audit Trail service must be called to log all CUD operations.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Performance', 'Security'], 'test_scenarios': ['Create a deep, multi-level hierarchy (e.g., 5+ levels).', 'Move a sub-tree from one branch to another.', 'Attempt to create naming conflicts at different levels of the hierarchy.', 'Delete a mid-level node and verify all its children are also deleted.', 'Test UI performance by loading a tree with 5,000+ nodes (using generated test data).', 'E2E test using Playwright to simulate a user building, modifying, and deleting a small plant model.'], 'test_data_needs': ['A script to generate a large, deeply nested asset hierarchy for performance testing.', "User accounts with 'Engineer' and 'Viewer' roles to test permission enforcement."], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Vitest/React Testing Library for frontend unit tests.', 'Playwright for E2E tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit test coverage for new logic is at or above 80%', 'Integration tests for API endpoints are implemented and passing', 'E2E tests covering the main happy paths and key error conditions are passing', 'UI has been reviewed for usability and accessibility compliance', 'Performance tests with a large dataset meet the specified requirements', 'Security review confirms that all operations are properly authenticated and authorized', 'All CUD operations are confirmed to be logged in the audit trail', 'Technical documentation for the API endpoints and database schema is created/updated', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a foundational story that blocks several other key features. It should be prioritized in an early sprint.', 'The backend and frontend work can be done in parallel once the API contract is defined.', 'A decision on the database schema for the hierarchy must be made and agreed upon by the team before implementation begins.'], 'release_impact': 'This feature is a core component of the initial product release. The product cannot be effectively configured or used without it.'}}