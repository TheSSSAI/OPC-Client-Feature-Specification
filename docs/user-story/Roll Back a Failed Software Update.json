{'story_metadata': {'story_id': 'US-055', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Roll Back a Failed Software Update', 'as_a_user_story': 'As an Administrator, I want to trigger a rollback of a distributed OPC Core Client to its previously installed, stable software version from the Central Management Plane, so that I can quickly recover from a failed or problematic software update and minimize operational downtime.', 'user_persona': 'Administrator, responsible for system health, maintenance, and stability of distributed client instances. This role aligns with REQ-USR-001.', 'business_value': 'Reduces Mean Time To Recovery (MTTR) for failed deployments, increases system reliability, and mitigates the risk associated with the software update process, thereby supporting operational continuity.', 'functional_area': 'System Administration & Maintenance', 'story_theme': 'Centralized Client Management'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful rollback of a client to its previous version', 'scenario_type': 'Happy_Path', 'given': 'an Administrator is logged into the Central Management Plane and viewing the client list, AND a specific client has been updated from version 1.1.0 to 1.2.0, AND the system has retained the previous version (1.1.0) information for that client', 'when': "the Administrator selects the client and initiates the 'Rollback Update' action AND confirms the action in a confirmation dialog", 'then': "the system sends a secure rollback command to the client, AND the client's status in the UI updates to 'Rollback in Progress', AND the client instance stops the container for version 1.2.0 and starts the container for version 1.1.0, AND upon successful restart and reconnection, the client's status in the UI updates to 'Running' and its version is displayed as '1.1.0', AND a detailed audit log entry is created for the rollback event.", 'validation_notes': "Verify through UI observation, checking the client's reported version via the API, and querying the audit log database."}, {'criteria_id': 'AC-002', 'scenario': 'Rollback option is unavailable for a client with no previous version', 'scenario_type': 'Error_Condition', 'given': 'an Administrator is viewing a client in the Central Management Plane that was a fresh install and has never been updated', 'when': 'the Administrator views the available actions for that client', 'then': "the 'Rollback Update' action is disabled or not visible, AND a tooltip explains that no previous version is available for rollback.", 'validation_notes': 'Check the UI state for a newly provisioned client instance.'}, {'criteria_id': 'AC-003', 'scenario': 'System handles a failed rollback process', 'scenario_type': 'Error_Condition', 'given': "an Administrator has initiated a rollback for a client, AND the client's previous software version is corrupted or fails to start", 'when': 'the client agent attempts to start the previous version and it fails after a set number of retries', 'then': "the client's status in the Central Management Plane UI updates to 'Rollback Failed', AND a high-priority system alert is generated for the Administrator, AND the system retains diagnostic logs from the failed startup attempt for remote retrieval.", 'validation_notes': 'Requires failure injection, such as replacing the previous Docker image with a faulty one. Verify UI status, alert generation, and log availability.'}, {'criteria_id': 'AC-004', 'scenario': 'Rollback command is queued for an offline client', 'scenario_type': 'Alternative_Flow', 'given': 'a client is offline due to a failed update, AND the Administrator initiates a rollback', 'when': 'the Central Management Plane attempts to send the rollback command', 'then': "the command is securely queued, AND the client's status in the UI updates to 'Rollback Pending (Offline)', AND when the client re-establishes a connection, it receives and executes the queued command.", 'validation_notes': 'Simulate a network partition, queue the command, and then restore the connection to observe the client performing the rollback.'}, {'criteria_id': 'AC-005', 'scenario': 'Administrator cancels the rollback action', 'scenario_type': 'Alternative_Flow', 'given': "an Administrator has clicked the 'Rollback Update' action, and a confirmation dialog is displayed", 'when': "the Administrator clicks the 'Cancel' button", 'then': "the dialog closes, AND no rollback command is sent, AND the client's status remains unchanged.", 'validation_notes': 'Perform the UI action and verify no backend command was sent and no state change occurred.'}], 'user_interface_requirements': {'ui_elements': ["A 'Rollback Update' button or menu item within the client management view.", "A confirmation modal dialog with 'Confirm' and 'Cancel' buttons.", "A status indicator for each client that can display 'Rollback in Progress', 'Rollback Failed', 'Rollback Pending (Offline)'."], 'user_interactions': ['Administrator selects a client from a list.', "Administrator clicks the 'Rollback Update' action.", 'Administrator confirms the action in a modal, which must clearly state the client name, current version, and target rollback version.'], 'display_requirements': ['The current software version of each client must be clearly visible in the management list.', "The confirmation dialog must explicitly state the version change (e.g., 'Roll back from v1.2.0 to v1.1.0?')."], 'accessibility_needs': ['All UI elements must be keyboard-navigable.', 'Confirmation dialogs must trap focus.', 'Status changes should be announced by screen readers.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'A rollback can only be performed to the single, immediately preceding software version.', 'enforcement_point': 'Backend logic before sending the rollback command; UI logic to disable the action if no previous version exists.', 'violation_handling': 'The API request will be rejected with a 400-level error. The UI will prevent the action from being initiated.'}, {'rule_id': 'BR-002', 'rule_description': "Only users with the 'Administrator' role can initiate a software rollback.", 'enforcement_point': 'API Gateway and backend service authorization middleware.', 'violation_handling': 'The API request will be rejected with a 403 Forbidden error.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-053', 'dependency_reason': 'The system must have a mechanism to deploy software updates to clients before it can support rolling them back. The update process must be designed to preserve the previous version for rollback.'}, {'story_id': 'US-050', 'dependency_reason': 'A centralized health dashboard for viewing and managing clients is required as the primary user interface for initiating this action.'}], 'technical_dependencies': ['A containerization runtime (Docker) on the edge device, as specified in REQ-ENV-001.', 'A stable, out-of-band agent on the edge device capable of managing containers, which is not part of the main application container being updated.', 'The secure communication channel (gRPC/MQTT) for command and control, as per REQ-ARC-001.', 'A database schema in the Central Management Plane to track current and previous versions for each client.'], 'data_dependencies': ["The system must have a record of the client's current and previous software version identifiers (e.g., Docker image tags)."], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The rollback command should be dispatched from the Central Management Plane to the client in under 1 second.', 'The client should complete the rollback process (container stop, old container start, re-connection) in under 2 minutes.'], 'security': ['The rollback command must be authenticated and transmitted over an encrypted channel (mTLS).', 'The action must be logged in the tamper-evident audit trail (REQ-FR-005), including user, client, timestamp, and versions.', 'The client-side agent must only accept commands from the trusted Central Management Plane.'], 'usability': ['The process should be achievable in 3 clicks or less from the main client dashboard.', 'Feedback on the rollback status must be clear and timely.'], 'accessibility': ['The feature must comply with WCAG 2.1 Level AA standards, as per REQ-IFC-001.'], 'compatibility': ['The rollback mechanism must function correctly on all supported OPC Core Client operating systems (Windows, Linux) as defined in REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires a robust, independent agent on the edge device.', 'State management of client versions in the central database must be atomic and reliable.', 'Error handling for failed rollbacks and offline clients adds significant complexity.', 'Potential for configuration or data schema incompatibility between versions is a major risk that needs a defined strategy (e.g., assume backward compatibility for this story).'], 'technical_risks': ['A failed rollback could leave a client in an unrecoverable state, requiring manual intervention.', 'Disk space on the edge device could be exhausted if old container images are not properly managed.', 'Configuration drift or data migration performed by a new version could prevent the old version from starting correctly.'], 'integration_points': ["Central Management Plane's client database.", 'Secure messaging bus (gRPC/MQTT).', 'Client-side container management agent.', 'System Auditing Service.', 'System Alerting Service.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security'], 'test_scenarios': ['End-to-end successful rollback.', 'Attempted rollback on a client with no prior version.', 'Rollback of an offline client.', 'Rollback process where the previous version container fails to start.', 'Verification of role-based access control (non-admins cannot perform rollback).', 'Verification of audit log creation for every rollback attempt (successful or failed).'], 'test_data_needs': ['Test clients in various states: freshly installed, updated once, updated multiple times.', "A 'faulty' container image that will fail to start to test the failed rollback scenario."], 'testing_tools': ['Playwright for E2E UI testing.', 'A test harness to simulate the client-side agent and its responses.', 'Failure injection tools (e.g., toxiproxy for network failures).']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by team', 'Unit and integration tests implemented with >80% coverage for new code', 'E2E tests for the happy path and key failure scenarios are automated and passing', 'User interface reviewed and approved by UX designer', 'Security requirements (authorization, audit logging) validated', 'Documentation for the feature is created in the System Administration Guide', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This story is dependent on the completion of the remote update feature (US-053).', 'Requires a dedicated test environment that accurately reflects the edge deployment architecture (e.g., a VM running Docker).'], 'release_impact': ['This is a key feature for ensuring system stability and manageability. It is critical for enabling safe and frequent updates in a production environment.']}}