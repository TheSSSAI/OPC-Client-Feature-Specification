{'story_metadata': {'story_id': 'US-026', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Map OPC Tags to Asset Properties for Contextualization', 'as_a_user_story': 'As an Engineer, I want to visually associate specific OPC tags with their corresponding properties on an asset within the plant hierarchy, so that the raw data gains operational context, enabling meaningful analysis, dashboarding, and AI model application.', 'user_persona': "Engineer: Responsible for configuring data sources, tags, dashboards, and reports. This user needs to structure and contextualize the system's data.", 'business_value': 'This is a foundational feature that transforms raw data points into contextualized, actionable information. It is essential for creating meaningful dashboards, applying AI/ML models correctly, enabling AR overlays, and simplifying data analysis for all user roles. It directly supports the ISA-95 standard (REQ-CON-004).', 'functional_area': 'Asset Management & Configuration', 'story_theme': 'Data Contextualization'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successfully map an unmapped OPC tag to an asset property', 'scenario_type': 'Happy_Path', 'given': "I am an Engineer logged into the system and I am viewing the Asset Management interface for a specific asset, 'Pump-101'", 'when': "I select an unmapped OPC tag, 'PMP101.Speed', from the available tags list, associate it with the asset property 'Motor Speed', and save the mapping", 'then': "The system displays a success notification, and the UI updates to show 'PMP101.Speed' is now mapped to the 'Motor Speed' property of 'Pump-101'.", 'validation_notes': "Verify the mapping is persisted in the database. The tag should no longer appear in the 'unmapped' list for this asset."}, {'criteria_id': 'AC-002', 'scenario': 'View existing tag mappings for an asset', 'scenario_type': 'Happy_Path', 'given': "I am an Engineer and I have selected an asset, 'Reactor-03', which has pre-existing tag mappings", 'when': "I navigate to the tag mapping section for 'Reactor-03'", 'then': "The UI displays a clear list of all currently mapped tags, showing each tag's name and the specific asset property it is mapped to (e.g., 'TIC101.PV' -> 'Internal Temperature').", 'validation_notes': 'Verify the list accurately reflects the mappings stored in the database for that asset.'}, {'criteria_id': 'AC-003', 'scenario': 'Edit an existing tag mapping', 'scenario_type': 'Happy_Path', 'given': "An OPC tag 'PMP101.Vibration' is incorrectly mapped to the 'Motor Speed' property of asset 'Pump-101'", 'when': "I select the mapping, change the associated asset property to 'Vibration Level', and save the change", 'then': "The system confirms the update, and the UI now shows 'PMP101.Vibration' is correctly mapped to 'Vibration Level'.", 'validation_notes': 'Check the database to ensure the mapping record was updated and not duplicated.'}, {'criteria_id': 'AC-004', 'scenario': 'Remove (unmap) a tag from an asset', 'scenario_type': 'Happy_Path', 'given': "An OPC tag 'PMP101.Status' is mapped to the 'Operational Status' property of asset 'Pump-101'", 'when': 'I select the option to remove this mapping and confirm the action in a confirmation dialog', 'then': "The system confirms the removal, the mapping is removed from the asset's list of mapped tags, and 'PMP101.Status' becomes available in the list of unmapped tags.", 'validation_notes': 'Verify the mapping record is deleted from the database.'}, {'criteria_id': 'AC-005', 'scenario': 'Attempt to map a tag that is already mapped', 'scenario_type': 'Error_Condition', 'given': "The OPC tag 'PMP101.Speed' is already mapped to a property on asset 'Pump-101'", 'when': "I attempt to map the same tag, 'PMP101.Speed', to another property on any asset", 'then': "The system prevents the action and displays a user-friendly error message, such as 'Tag PMP101.Speed is already mapped. Please unmap it first to reassign.'", 'validation_notes': 'Ensure no new mapping is created in the database.'}, {'criteria_id': 'AC-006', 'scenario': 'Interface remains responsive with large numbers of assets and tags', 'scenario_type': 'Edge_Case', 'given': 'The system contains 1,000+ assets and 10,000+ unmapped OPC tags', 'when': 'I open the tag mapping interface and use the search/filter functions for both the asset hierarchy and the available tags list', 'then': 'The UI loads within 3 seconds, and search/filter results appear in under 500ms, without freezing the browser.', 'validation_notes': 'Test with a large, seeded dataset. Verify that techniques like pagination or virtual scrolling are implemented.'}, {'criteria_id': 'AC-007', 'scenario': 'Map a tag to an asset property using drag-and-drop', 'scenario_type': 'Alternative_Flow', 'given': 'I am viewing the OPC namespace browser and the Asset Management interface simultaneously (e.g., in a split view)', 'when': "I drag the tag 'TIC101.PV' from the namespace browser and drop it onto the 'Internal Temperature' property field of the 'Reactor-03' asset", 'then': "The system creates the mapping, and the UI updates to show 'TIC101.PV' is now mapped to the 'Internal Temperature' property.", 'validation_notes': 'This provides an efficient alternative to selecting from a list, as per REQ-FR-009.'}], 'user_interface_requirements': {'ui_elements': ['A tree view for the asset hierarchy.', 'A details panel for the selected asset, showing its properties.', 'A list or table displaying currently mapped tags for the selected asset.', 'A searchable and filterable list/modal of available (unmapped) OPC tags.', "Buttons for 'Add Mapping', 'Edit', and 'Remove'.", 'Confirmation dialogs for destructive actions like removing a mapping.', 'Drag-and-drop targets on asset properties and draggable elements for OPC tags.'], 'user_interactions': ['User can select an asset from the hierarchy to view its details.', 'User can search and filter the asset hierarchy and the list of available tags.', 'User can initiate mapping via a button click or by drag-and-drop.', 'The system provides clear feedback (e.g., toast notifications) for success or failure of actions.'], 'display_requirements': ['The full path of the OPC tag should be visible.', 'The name of the asset property should be clearly displayed.', 'A clear distinction must be made between mapped and unmapped tags.'], 'accessibility_needs': ['All UI controls must be keyboard-navigable.', 'Search fields must have associated labels.', 'The drag-and-drop functionality must have a keyboard-accessible alternative (e.g., the button-based flow).']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'An OPC tag can only be mapped to one asset property at a time across the entire tenant.', 'enforcement_point': 'Backend API upon attempting to create a new mapping.', 'violation_handling': 'The API request is rejected with a 409 Conflict status code and a descriptive error message.'}, {'rule_id': 'BR-002', 'rule_description': 'When an asset is deleted, all associated tag mappings must also be deleted.', 'enforcement_point': 'Database level, using a foreign key constraint with cascading delete.', 'violation_handling': 'N/A - Handled by database referential integrity.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-025', 'dependency_reason': 'The asset hierarchy must exist before tags can be mapped to assets within it.'}, {'story_id': 'US-001', 'dependency_reason': 'The system must be able to browse and list available OPC tags to present them to the user for mapping.'}, {'story_id': 'US-027', 'dependency_reason': "Asset templates are required to define the standard set of 'properties' (e.g., Temperature, Pressure) to which tags can be mapped, ensuring consistency."}], 'technical_dependencies': ['Backend API endpoints for CRUD operations on asset-tag mappings.', 'A database table to store the many-to-many relationship between assets and tags (e.g., `AssetTagMappings`).', 'Frontend state management solution (e.g., Redux Toolkit) to handle complex UI state.'], 'data_dependencies': ['Requires existing asset records in the database.', 'Requires a live or cached list of available OPC tags from a configured OPC server.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The tag mapping UI must load in under 3 seconds, even with thousands of assets and tags.', 'Search and filter operations on tag/asset lists must return results in under 500ms (P95).'], 'security': ["Only users with the 'Engineer' role (or higher) can create, edit, or delete tag mappings, as enforced by the backend API (REQ-USR-001)."], 'usability': ['The process of finding an asset and a tag and mapping them should be intuitive, minimizing clicks.', 'Error messages must be clear and guide the user on how to resolve the issue.'], 'accessibility': ['The interface must comply with WCAG 2.1 Level AA standards (REQ-IFC-001).'], 'compatibility': ['The UI must be fully functional on all supported modern web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The frontend implementation is the most complex part, requiring efficient handling of potentially large lists (virtualization is recommended).', 'Implementing a smooth and accessible drag-and-drop experience adds complexity.', 'Backend logic is relatively simple CRUD, but requires careful database design for performance and integrity.'], 'technical_risks': ['Poor UI performance if large datasets are not handled efficiently, leading to a frustrating user experience.', 'Potential for data integrity issues if cascading deletes or unique constraints are not properly implemented.'], 'integration_points': ['The OPC tag browsing service/module to retrieve the list of available tags.', 'The Asset Management backend service to retrieve the asset hierarchy and persist mappings.', 'The data will be consumed by the Dashboard, Reporting, and AI/ML modules.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Performance', 'Usability'], 'test_scenarios': ['Full CRUD lifecycle of a tag mapping (Create, Read, Update, Delete).', 'Attempting to create a duplicate mapping.', 'Searching and filtering for assets and tags.', 'Verifying UI responsiveness with a large pre-populated test database.', 'End-to-end test of the drag-and-drop functionality.'], 'test_data_needs': ['A tenant with a multi-level asset hierarchy (at least 3 levels deep).', 'A set of at least 1000 unmapped OPC tags.', 'A small set of pre-mapped tags for testing view and edit functionality.'], 'testing_tools': ['Backend: xUnit, Moq', 'Frontend: Vitest, React Testing Library', 'End-to-End: Playwright']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit test coverage for new code meets the 80% project standard', 'Integration tests verifying API and database interactions are passing', 'E2E tests for all user flows (including drag-and-drop) are implemented and passing', 'UI performance with large datasets is verified and meets requirements', 'Security role checks are implemented and tested', 'All UI elements are accessible and keyboard-navigable', 'Relevant documentation (e.g., User Manual) is updated', 'Story deployed and verified in the staging environment by QA'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a high-priority foundational story that unblocks many other features.', 'It is dependent on US-025, US-001, and US-027 and must be scheduled after their completion.', 'The drag-and-drop feature (AC-007) could be split into a separate story if the initial implementation proves too large for a single sprint.'], 'release_impact': 'This feature is critical for the Minimum Viable Product (MVP) as it provides the core data contextualization capability of the platform.'}}