{'story_metadata': {'story_id': 'US-021', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Configure Tags via Drag-and-Drop from Namespace Browser', 'as_a_user_story': 'As an Engineer, I want to drag tags from the OPC server namespace browser and drop them directly onto a dashboard widget or an asset in the hierarchy, so that I can rapidly configure data visualizations and asset-to-tag mappings with fewer clicks and less manual data entry.', 'user_persona': 'Engineer (as defined in REQ-USR-001)', 'business_value': 'Increases configuration speed and efficiency, reduces the likelihood of manual data entry errors (e.g., tag name typos), and improves the overall user experience, leading to faster system adoption and setup.', 'functional_area': 'System Configuration & User Interface', 'story_theme': 'Core OPC Client and Asset Management Features'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Drag a single tag to an empty dashboard canvas', 'scenario_type': 'Happy_Path', 'given': 'An Engineer is on the dashboard configuration page with the OPC namespace browser panel visible', 'when': 'The Engineer clicks and drags a tag from the namespace browser and drops it onto a valid, empty area of the dashboard canvas', 'then': "A new default widget (e.g., a 'Single Value Display') is created at the drop location, automatically configured to display the data for the dropped tag.", 'validation_notes': "Verify a new widget appears and is correctly linked to the tag's data source. The change should be saved as part of the dashboard configuration."}, {'criteria_id': 'AC-002', 'scenario': 'Drag a single tag to a compatible, existing widget', 'scenario_type': 'Happy_Path', 'given': 'An Engineer is on the dashboard configuration page with a multi-series trend chart widget, and the namespace browser is visible', 'when': 'The Engineer drags a tag and drops it directly onto the trend chart widget', 'then': "The trend chart's configuration is updated to include the new tag as a new data series (pen), and the chart visually updates to display it.", 'validation_notes': "Check the widget's configuration to confirm the new tag has been added. The visual trend should reflect the new data series."}, {'criteria_id': 'AC-003', 'scenario': 'Drag a single tag to an asset in the hierarchy view', 'scenario_type': 'Happy_Path', 'given': 'An Engineer is on the Asset Hierarchy Management page (as per REQ-FR-021) with the OPC namespace browser visible', 'when': "The Engineer drags a tag and drops it onto a specific asset (e.g., 'Pump-101') in the hierarchy tree", 'then': "The system creates a mapping between the tag and the asset, and a success notification ('Tag successfully mapped to Asset-Name') is displayed.", 'validation_notes': "Navigate to the asset's details page and verify that the new tag is listed in its associated tags."}, {'criteria_id': 'AC-004', 'scenario': 'Visual feedback during drag operation', 'scenario_type': 'Alternative_Flow', 'given': 'The Engineer has initiated a drag operation on a tag', 'when': 'The Engineer moves the cursor over a valid drop zone (e.g., dashboard canvas, compatible widget, asset)', 'then': 'The drop zone is visually highlighted (e.g., a colored border or background overlay appears) and the cursor changes to indicate a valid drop is possible.', 'validation_notes': 'Visually confirm that highlighting occurs only on valid targets.'}, {'criteria_id': 'AC-005', 'scenario': 'Visual feedback for an invalid drop target', 'scenario_type': 'Error_Condition', 'given': 'The Engineer has initiated a drag operation on a tag', 'when': 'The Engineer moves the cursor over an invalid drop zone (e.g., the main navigation bar, a non-interactive UI element)', 'then': "The cursor changes to a 'not allowed' icon, and no highlighting occurs on the element.", 'validation_notes': 'Confirm that dropping the tag in this state results in no action being taken.'}, {'criteria_id': 'AC-006', 'scenario': 'Attempt to drop a tag on an incompatible widget', 'scenario_type': 'Error_Condition', 'given': 'An Engineer is on the dashboard configuration page with a widget that only accepts boolean values', 'when': 'The Engineer drags a numeric tag and drops it onto that widget', 'then': "The drop action is rejected, the widget's configuration is not changed, and an informative error message is displayed (e.g., 'This widget only accepts boolean tags.').", 'validation_notes': 'Verify no configuration change occurs and the error toast/message appears.'}, {'criteria_id': 'AC-007', 'scenario': 'Drag multiple selected tags to the dashboard canvas', 'scenario_type': 'Happy_Path', 'given': 'An Engineer has selected three tags in the namespace browser', 'when': 'The Engineer drags the selection and drops it onto the dashboard canvas', 'then': 'Three new default widgets are created on the dashboard, each one configured for one of the selected tags.', 'validation_notes': 'Confirm that three distinct widgets are created and correctly configured.'}, {'criteria_id': 'AC-008', 'scenario': 'Keyboard alternative for accessibility', 'scenario_type': 'Alternative_Flow', 'given': 'An Engineer has focused on a tag in the namespace browser using the keyboard', 'when': "The Engineer opens a context menu (e.g., right-click or keyboard equivalent) and selects an 'Add to...' option", 'then': 'A dialog appears allowing the Engineer to select the target dashboard or asset to complete the configuration.', 'validation_notes': 'Verify this entire flow can be completed using only a keyboard, in compliance with WCAG 2.1 AA.'}], 'user_interface_requirements': {'ui_elements': ['Interactive OPC Namespace Browser with draggable items.', "Dashboard canvas and widgets that act as 'drop zones'.", "Asset hierarchy tree with items that act as 'drop zones'.", 'Visual indicators for drag state (e.g., ghost image of the tag being dragged).', 'Visual highlighting for valid drop zones on hover.', "Cursor changes to indicate valid (e.g., 'copy'), invalid (e.g., 'not-allowed'), and grabbing states.", 'Context menu on tags for keyboard-based alternative.'], 'user_interactions': ['User must be able to click and hold on a tag or a selection of tags to initiate a drag.', 'The system must provide real-time visual feedback as the user drags the item across the screen.', 'Releasing the mouse button over a valid target triggers the configuration action.', 'Releasing the mouse button over an invalid target cancels the operation.'], 'display_requirements': ['Success notifications upon successful drop and configuration.', 'Error notifications for invalid drop attempts (e.g., incompatible widget, insufficient permissions).'], 'accessibility_needs': ['A keyboard-only alternative must be provided to achieve the same outcome, as per REQ-IFC-001 and WCAG 2.1 Level AA.', 'Visual highlighting must have sufficient color contrast.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "A user can only drop tags onto dashboards or assets for which they have 'Write' permissions.", 'enforcement_point': 'Backend API, upon receiving the drop event payload.', 'violation_handling': "The API request is rejected with a 403 Forbidden status code. The frontend displays a 'Permission Denied' error message to the user."}, {'rule_id': 'BR-002', 'rule_description': 'A tag can only be dropped onto a widget that supports its data type (e.g., numeric, boolean, string).', 'enforcement_point': 'Frontend validation before enabling the drop, and backend validation upon receiving the request.', 'violation_handling': 'The frontend should prevent the drop visually. If the request is sent, the backend rejects it with a 400 Bad Request status and an error message explaining the type mismatch.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-001', 'dependency_reason': 'The OPC Namespace Browser must exist to provide the source of tags to be dragged.'}, {'story_id': 'US-020', 'dependency_reason': 'The customizable dashboard and widget framework must exist to provide a valid drop target.'}, {'story_id': 'US-025', 'dependency_reason': 'The Asset Hierarchy Management module must exist to provide assets as valid drop targets.'}], 'technical_dependencies': ['A frontend library/framework capable of handling complex drag-and-drop interactions (e.g., React with react-dnd).', 'Backend API endpoints to handle the creation/updating of dashboard widget configurations and asset-tag mappings.'], 'data_dependencies': ['Access to the list of OPC tags from a connected server.', 'Access to dashboard and asset configuration data for the current user/tenant.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The drag-and-drop interaction must feel smooth and responsive (<100ms UI feedback) even when the namespace browser contains thousands of tags.', 'The backend API call to save the configuration must complete within 200ms (P95) as per REQ-NFR-001.'], 'security': ["All configuration changes made via drag-and-drop must be subject to the user's Role-Based Access Control (RBAC) permissions.", 'The action of mapping a tag to an asset or dashboard must be logged in the audit trail (REQ-FR-005).'], 'usability': ['The drag-and-drop interaction should be intuitive and follow common design patterns.', 'Visual feedback must be clear and unambiguous to the user.'], 'accessibility': ['Must comply with WCAG 2.1 Level AA, requiring a fully functional keyboard alternative (REQ-IFC-001).'], 'compatibility': ['Functionality must be consistent across all supported modern web browsers (Chrome, Firefox, Edge, Safari) as per REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Implementing a robust, stateful drag-and-drop experience across multiple, independent UI components.', 'Handling various drop target types (canvas, specific widgets, tree view items) and their unique logic.', 'Ensuring high performance with large lists of draggable items.', 'Developing a fully-featured keyboard-only alternative for accessibility.'], 'technical_risks': ['Potential for UI lag or jank if the drag-and-drop implementation is not optimized.', 'Complexity in managing application state during the drag operation, especially if multiple components need to react.'], 'integration_points': ['Frontend: OPC Namespace Browser component, Dashboard component, Asset Hierarchy component.', 'Backend: Dashboard Service API, Asset Management Service API.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Usability', 'Accessibility'], 'test_scenarios': ['Verify drag-and-drop to dashboard canvas.', 'Verify drag-and-drop to a compatible widget.', 'Verify drag-and-drop to an asset.', 'Verify rejection of drop on incompatible widget.', 'Verify rejection of drop due to insufficient permissions.', 'Verify multi-tag drag-and-drop.', 'Verify the complete keyboard-alternative flow.'], 'test_data_needs': ['A mock OPC server with a populated namespace including tags of different data types (numeric, boolean, string).', "User accounts with 'Engineer' and 'Viewer' roles to test permission enforcement.", 'Pre-configured dashboards and asset hierarchies.'], 'testing_tools': ['Frontend: Vitest, React Testing Library.', 'E2E: Playwright (as per REQ-ARC-002).', 'Accessibility: Axe-core browser extension.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit and integration tests implemented with >= 80% code coverage and all passing', 'E2E automated tests for all primary happy paths and key error conditions are created and passing', 'User interface reviewed and approved by a UX designer', 'Performance requirements for UI responsiveness verified', 'Security requirements (RBAC and audit logging) validated', 'Accessibility requirements, including the keyboard alternative, are implemented and verified', 'Documentation for the feature is updated in the User Manual', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a high-value usability feature that should be prioritized after its prerequisite stories are complete.', 'Requires significant frontend development effort compared to backend effort.'], 'release_impact': ['This feature is a key differentiator and a major improvement to the user experience for system configuration. It should be highlighted in release notes and marketing materials.']}}