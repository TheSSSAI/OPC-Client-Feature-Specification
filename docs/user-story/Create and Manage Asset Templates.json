{'story_metadata': {'story_id': 'US-027', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Create and Manage Asset Templates', 'as_a_user_story': 'As an Engineer, I want to create, manage, and use asset templates that define the structure and properties of common equipment types, so that I can rapidly and consistently configure multiple similar assets, reducing manual effort and ensuring a standardized data model across the plant.', 'user_persona': 'Engineer (as defined in REQ-USR-001)', 'business_value': 'Increases configuration efficiency, ensures data model consistency, reduces manual errors, and enables scalable management of plant assets.', 'functional_area': 'Asset Management', 'story_theme': 'Asset Model Configuration'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successfully create a new asset template', 'scenario_type': 'Happy_Path', 'given': 'I am an authenticated Engineer on the Asset Management page', 'when': "I navigate to the 'Asset Templates' section and click 'Create New Template'", 'then': "A form is displayed with fields for 'Template Name', 'Description', and a dynamic list for 'Properties'", 'validation_notes': 'Verify the form appears and contains all required input fields.'}, {'criteria_id': 'AC-002', 'scenario': 'Define and save a new asset template', 'scenario_type': 'Happy_Path', 'given': "I am on the 'Create New Template' form", 'when': "I enter a unique name 'Pump-Motor-Assembly', a description, and add properties such as 'MotorCurrent' (Float), 'InletPressure' (Float), and 'Status' (String), and then click 'Save'", 'then': 'The system validates the input, saves the new template, and displays a success notification', 'and': "I am redirected to the list of asset templates where 'Pump-Motor-Assembly' is now visible.", 'validation_notes': 'Check the database to confirm the template and its properties are saved correctly. Verify the UI redirects and the new template is in the list.'}, {'criteria_id': 'AC-003', 'scenario': 'Attempt to create a template with a duplicate name', 'scenario_type': 'Error_Condition', 'given': "An asset template named 'Pump-Motor-Assembly' already exists", 'when': 'I attempt to create another template with the exact same name', 'then': "The system prevents the save operation and displays a clear validation error: 'A template with this name already exists. Please choose a unique name.'", 'validation_notes': 'Verify the form remains open and the error message is displayed next to the name field. No new record should be created in the database.'}, {'criteria_id': 'AC-004', 'scenario': 'Edit an existing asset template', 'scenario_type': 'Happy_Path', 'given': 'I am viewing the list of asset templates', 'when': "I select the 'Pump-Motor-Assembly' template and click 'Edit'", 'then': 'The template form opens, pre-populated with its current name, description, and properties', 'and': "When I add a new property 'Vibration' (Float) and click 'Save', the template is updated successfully.", 'validation_notes': 'Verify the updated template in the database. The change should be reflected when viewing the template details again.'}, {'criteria_id': 'AC-005', 'scenario': 'Delete an unused asset template', 'scenario_type': 'Happy_Path', 'given': "An asset template 'Obsolete-Pump' exists and is not being used by any configured assets", 'when': "I select the template, click 'Delete', and confirm the action in a confirmation dialog", 'then': 'The template is permanently removed from the system and a success message is shown', 'and': "The 'Obsolete-Pump' template no longer appears in the list.", 'validation_notes': 'Confirm the record is deleted from the database.'}, {'criteria_id': 'AC-006', 'scenario': 'Attempt to delete an asset template that is in use', 'scenario_type': 'Edge_Case', 'given': "The 'Pump-Motor-Assembly' template is used by at least one asset in the asset hierarchy", 'when': "I attempt to delete the 'Pump-Motor-Assembly' template", 'then': 'The system blocks the deletion', 'and': "A clear error message is displayed: 'This template cannot be deleted because it is currently in use by one or more assets.'", 'validation_notes': 'Verify the template is not deleted and the error message is shown. This requires an API check against the asset table.'}], 'user_interface_requirements': {'ui_elements': ["A dedicated 'Asset Templates' tab/section within the Asset Management module.", 'A data grid to list existing templates with columns for Name, Description, and Actions (Edit, Delete).', "A 'Create New Template' button.", 'A modal or dedicated page form for creating/editing templates.', 'Input fields: Text for Name, Textarea for Description.', "A dynamic list component to add/remove 'Properties', where each property has a text input for its name and a dropdown for its data type (e.g., String, Float, Integer, Boolean)."], 'user_interactions': ['The list of templates must be searchable by name.', 'The user must be prompted with a confirmation dialog before deleting a template.', 'Form fields must have client-side validation for required fields (e.g., Name).'], 'display_requirements': ['The template list should clearly display the name and description of each template.', 'Validation errors must be displayed inline, next to the relevant form field.'], 'accessibility_needs': ['All form fields must have associated labels.', 'All interactive elements (buttons, links) must be keyboard-navigable and have clear focus indicators, adhering to WCAG 2.1 AA.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'Asset template names must be unique within a tenant.', 'enforcement_point': 'Backend API upon create/update request.', 'violation_handling': 'Reject the request with a 409 Conflict status code and a descriptive error message.'}, {'rule_id': 'BR-002', 'rule_description': 'An asset template cannot be deleted if it is currently associated with one or more assets.', 'enforcement_point': 'Backend API upon delete request.', 'violation_handling': 'Reject the request with a 400 Bad Request status code and an error message explaining the dependency.'}, {'rule_id': 'BR-003', 'rule_description': "Editing an existing template's properties does not retroactively alter assets already created from that template. Changes only apply to new assets created from the template going forward.", 'enforcement_point': 'System design and documentation.', 'violation_handling': 'N/A - This is a design principle to ensure stability of existing asset configurations.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-025', 'dependency_reason': 'The core Asset Hierarchy module and data model must exist to provide a context for templates.'}, {'story_id': 'US-048', 'dependency_reason': 'The Role-Based Access Control (RBAC) system must be implemented to restrict template management functions to authorized roles (Engineer, Administrator).'}], 'technical_dependencies': ['Backend: .NET REST API endpoints for CRUD operations on templates.', 'Database: PostgreSQL schema with tables for `AssetTemplates` and `TemplateProperties`, managed by EF Core Migrations.', 'Frontend: React components for the template list and creation/edit form.'], 'data_dependencies': ['Requires the existence of the `Assets` table to check for dependencies before allowing a template deletion.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['API response time for all template CRUD operations must be < 300ms (P95).', 'The template list page should load in under 2 seconds with up to 1,000 templates.'], 'security': ["Only users with 'Engineer' or 'Administrator' roles can access the template management UI and APIs.", 'All input fields must be sanitized to prevent XSS attacks.'], 'usability': ['The process of creating a template with several properties should be intuitive and require minimal clicks.'], 'accessibility': ['UI must comply with WCAG 2.1 Level AA standards.'], 'compatibility': ['The feature must function correctly on all supported browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires new database schema design and migrations.', 'The frontend form requires dynamic state management for the property list.', 'Backend logic must handle validation and dependency checks (e.g., checking for usage before deletion).'], 'technical_risks': ['The initial design of template properties must be flexible enough to support future requirements without requiring significant refactoring.'], 'integration_points': ["The Asset Management module's 'Create Asset' feature will need to be updated in a future story to consume these templates."]}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify all CRUD operations for templates.', 'Test validation for duplicate template names.', 'Test business rule enforcement for deleting a template in use.', 'Verify role-based access control prevents unauthorized users (e.g., Operator) from accessing template management.', 'Test UI responsiveness and form validation.'], 'test_data_needs': ['A tenant with an Engineer user.', 'A set of existing assets linked to a template to test the delete-in-use scenario.'], 'testing_tools': ['Backend: xUnit, Moq', 'Frontend: Vitest, React Testing Library', 'E2E: Playwright']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit test coverage for new backend logic is >= 80%', 'Frontend component tests are implemented and passing', 'E2E tests for the create, edit, and delete flows are passing', 'User interface reviewed and approved by the Product Owner/UX designer', 'Performance requirements for API and page load are met', 'Security requirements (RBAC) are validated', 'User documentation for the Asset Template feature is created/updated', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This is a foundational feature for efficient asset configuration. It should be prioritized early in the development of the Asset Management module, immediately after the basic asset hierarchy is established.'], 'release_impact': ['Enables a key feature for enterprise-scale deployments. Its completion is a prerequisite for any story involving bulk asset creation.']}}