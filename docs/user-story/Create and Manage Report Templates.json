{'story_metadata': {'story_id': 'US-056', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Create and Manage Report Templates', 'as_a_user_story': 'As an Engineer, I want to design, configure, and save a report template that includes layout, data placeholders, and visualization components, so that I can standardize reporting and enable the rapid generation of consistent reports for different assets or time periods.', 'user_persona': 'Engineer. This user is responsible for system configuration, including setting up standardized reporting formats for operational analysis. They have Read/Write access to report configurations as per REQ-USR-001.', 'business_value': 'Increases operational efficiency by eliminating repetitive report creation. Enforces reporting standards and consistency across the organization, leading to more reliable data-driven decisions. Enables subsequent features like scheduled reporting (US-057).', 'functional_area': 'Reporting and Analytics', 'story_theme': 'Automated Reporting'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Initiate new report template creation', 'scenario_type': 'Happy_Path', 'given': "I am an authenticated Engineer on the 'Reporting' section of the Central Management Plane", 'when': "I navigate to the 'Templates' tab and click the 'Create New Template' button", 'then': 'I am redirected to a dedicated report template editor view with a blank canvas.', 'validation_notes': 'Verify the URL route changes to the editor page and the page title indicates a new template is being created.'}, {'criteria_id': 'AC-002', 'scenario': 'Define template metadata and add components', 'scenario_type': 'Happy_Path', 'given': 'I am in the report template editor view', 'when': "I enter a unique name, an optional description, and drag a 'Trend Chart' component and a 'KPI Value' component onto the editor canvas", 'then': 'The system accepts the name and description, and the components appear on the canvas.', 'and': 'I can select each component to open a configuration panel to define its properties (e.g., title, placeholder for data source).', 'validation_notes': 'Check that input fields for name/description are present. Verify that a component toolbox exists and that drag-and-drop functionality works.'}, {'criteria_id': 'AC-003', 'scenario': 'Configure a component with asset placeholders', 'scenario_type': 'Happy_Path', 'given': "I have added a 'Trend Chart' component to the template canvas", 'when': "I configure the component to display data for a tag named 'MotorCurrent' associated with a placeholder asset", 'then': "The component configuration is saved with a reference like '[Asset].MotorCurrent', indicating that the specific asset will be chosen when the report is generated.", 'validation_notes': 'Inspect the saved template data structure to ensure it stores a placeholder reference, not a hardcoded asset ID.'}, {'criteria_id': 'AC-004', 'scenario': 'Successfully save a valid report template', 'scenario_type': 'Happy_Path', 'given': 'I have created a report template with a unique name and at least one configured component', 'when': "I click the 'Save Template' button", 'then': 'The system validates the configuration, saves the template, and redirects me to the list of all report templates.', 'and': 'A success notification is displayed, and the newly created template appears in the list.', 'validation_notes': 'Verify the template is persisted in the database with the correct `tenant_id`. Check the UI for the success message and the updated list.'}, {'criteria_id': 'AC-005', 'scenario': 'Attempt to save a template with a missing name', 'scenario_type': 'Error_Condition', 'given': 'I am in the report template editor', 'when': 'I attempt to save the template without providing a name', 'then': 'The save operation is blocked.', 'and': 'A user-friendly validation error message is displayed next to the name field, indicating it is required.', 'validation_notes': 'Trigger the save action with an empty name field and assert that no API call is made and the error message appears.'}, {'criteria_id': 'AC-006', 'scenario': 'Attempt to save a template with a duplicate name', 'scenario_type': 'Edge_Case', 'given': "A report template named 'Daily Production Summary' already exists for my tenant", 'when': "I try to save a new or existing template with the name 'Daily Production Summary'", 'then': 'The save operation is blocked by the backend.', 'and': 'A user-friendly validation error message is displayed, stating that the template name must be unique.', 'validation_notes': 'Ensure a template with a known name exists. Attempt to save another with the same name and verify the API returns a conflict error (e.g., 409) and the UI displays the correct message.'}, {'criteria_id': 'AC-007', 'scenario': 'Edit an existing report template', 'scenario_type': 'Alternative_Flow', 'given': 'I am on the report templates list page', 'when': "I click the 'Edit' icon for an existing template", 'then': 'I am taken to the report template editor with all of its existing configuration loaded.', 'and': 'I can modify its name, description, and components, and save the changes.', 'validation_notes': 'Load a template for editing, make a change (e.g., add a new component), save it, and then reload it to verify the change was persisted.'}], 'user_interface_requirements': {'ui_elements': ["A 'Report Templates' list view with columns for Name, Description, Last Modified, and Actions (Edit, Delete, Copy).", "A 'Create New Template' button.", 'A template editor view containing:', '  - Input fields for Template Name (required) and Description (optional).', '  - A toolbox of available report components (e.g., Trend Chart, KPI Value, Alarm Summary, Static Text, Image/Logo).', '  - A main canvas area supporting a grid-based layout for arranging components.', '  - A properties panel that appears when a component is selected, allowing for detailed configuration.', "  - 'Save' and 'Cancel' buttons."], 'user_interactions': ['Users can drag and drop components from the toolbox onto the canvas.', 'Users can resize and reorder components on the canvas.', 'Clicking a component on the canvas selects it and displays its configuration options in the properties panel.'], 'display_requirements': ['The system must clearly distinguish between template creation and report generation.', 'Validation errors must be displayed inline, next to the relevant input field.'], 'accessibility_needs': ['All UI controls must be keyboard-navigable.', 'All form fields must have associated labels.', 'The drag-and-drop interface must have an alternative, keyboard-accessible method for adding and arranging components.', 'UI must comply with WCAG 2.1 Level AA standards as per REQ-IFC-001.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'Report template names must be unique within a single tenant.', 'enforcement_point': 'Backend API upon create/update request.', 'violation_handling': 'Return a 409 Conflict error with a descriptive message. The frontend must display this message to the user.'}, {'rule_id': 'BR-002', 'rule_description': 'A report template must contain at least one component to be saved.', 'enforcement_point': "Frontend validation before enabling the 'Save' button; reinforced by backend API.", 'violation_handling': "The 'Save' button remains disabled until a component is added. If an API call is made, return a 400 Bad Request error."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-005', 'dependency_reason': "The ability to visualize historical data as a trend is required to offer a 'Trend Chart' component in the template editor."}, {'story_id': 'US-026', 'dependency_reason': "The ability to map tags to assets is required to implement the concept of asset placeholders in templates, which is a core part of this feature's reusability."}, {'story_id': 'US-058', 'dependency_reason': "If an 'AI Summary' component is to be included, the underlying AI reporting feature must be complete."}], 'technical_dependencies': ['Backend: A RESTful API with CRUD endpoints for `/api/v1/tenants/{tenantId}/report-templates`.', 'Database: A new table `ReportTemplates` in the PostgreSQL database with columns for `id`, `tenant_id`, `name`, `description`, and `definition` (JSONB type).', 'Frontend: A UI component library (e.g., `react-grid-layout` or `react-dnd`) to implement the drag-and-drop canvas.'], 'data_dependencies': ['The editor may need to query for a list of common tag names or asset types to assist the user during component configuration.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The report template editor must load in under 3 seconds.', 'Saving a template must complete within 500ms (P95).'], 'security': ['Users can only create, view, edit, or delete report templates within their own tenant.', "All API endpoints for managing templates must be protected and require the 'Engineer' or 'Administrator' role.", 'User-provided text (name, description) must be sanitized to prevent XSS attacks.'], 'usability': ['The template editor should be intuitive, minimizing the learning curve for creating a complex report layout.'], 'accessibility': ['Must adhere to WCAG 2.1 Level AA standards.'], 'compatibility': ['The editor must function correctly on all supported modern web browsers (Chrome, Firefox, Edge, Safari) as per REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The frontend implementation of the drag-and-drop editor canvas is the most complex part of this story.', 'Designing a flexible and versionable JSON schema for the template definition is critical for future maintainability and the addition of new component types.', "The logic for handling asset/tag placeholders requires careful design to ensure it's robust."], 'technical_risks': ['Choosing a drag-and-drop library that is not well-maintained or has poor accessibility support could lead to rework.', 'An poorly designed template definition schema could make it difficult to add new report components in the future.'], 'integration_points': ['The saved templates will be consumed by the report generation service (US-057).', 'The backend API will integrate with the authentication/authorization service (Keycloak) to enforce role-based access.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Usability', 'Security'], 'test_scenarios': ['Create a template with every available component type.', 'Edit an existing template by adding, removing, and reconfiguring components.', 'Attempt to save a template with invalid data (missing name, duplicate name, invalid component config).', 'Verify that a user from Tenant A cannot see or edit templates from Tenant B.', "Test the editor's responsiveness on different screen sizes."], 'test_data_needs': ["At least two tenants with different users in the 'Engineer' role.", 'Pre-existing asset and tag data to populate configuration dropdowns.'], 'testing_tools': ['Frontend: Vitest, React Testing Library.', 'E2E: Playwright.', 'Backend: xUnit, Moq.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit and integration tests implemented with >80% code coverage', 'E2E tests for the create, edit, and save flows are passing', 'User interface has been reviewed and approved by a UX designer', 'Performance requirements for load time and save operations are met', 'Security requirements (RBAC, data isolation) are validated', 'User documentation for creating and managing report templates is written', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a foundational story for the entire automated reporting feature. It blocks US-057.', 'Requires both frontend and backend development effort, with the majority of the complexity on the frontend.'], 'release_impact': ['This story delivers a key piece of the reporting module. Without it, scheduled and on-demand standardized reporting is not possible.']}}