{'story_metadata': {'story_id': 'US-048', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Assign Roles to a User', 'as_a_user_story': 'As an Administrator, I want to assign and un-assign one or more predefined roles to a specific user account within my tenant, so that I can efficiently manage user permissions and enforce the principle of least privilege to maintain system security.', 'user_persona': 'Administrator, as defined in REQ-USR-001. This user is responsible for system setup, user management, and security configuration for their tenant.', 'business_value': 'Enforces security policies and compliance by implementing Role-Based Access Control (RBAC). Simplifies user administration, reduces the risk of unauthorized access, and is a foundational feature for multi-tenancy.', 'functional_area': 'User Management & Security', 'story_theme': 'Centralized Management and Administration'}, 'acceptance_criteria': [{'criteria_id': 'AC-048-01', 'scenario': 'Assign a single role to a user with no existing roles', 'scenario_type': 'Happy_Path', 'given': 'I am an Administrator logged into the Central Management Plane and am viewing the details of a user who currently has no roles assigned.', 'when': "I select the 'Engineer' role from the list of available roles and click 'Save'.", 'then': "The system displays a success notification, the user's details page is updated to show 'Engineer' as an assigned role, and the user's permissions are updated to reflect the Engineer role on their next login or token refresh."}, {'criteria_id': 'AC-048-02', 'scenario': 'Assign multiple roles to a user', 'scenario_type': 'Happy_Path', 'given': "I am an Administrator viewing the details of a user who has the 'Viewer' role.", 'when': "I select the 'Engineer' and 'Operator' roles, leaving 'Viewer' selected, and click 'Save'.", 'then': "The system saves the changes, and the user's details page lists 'Viewer', 'Engineer', and 'Operator' as assigned roles. The user's effective permissions become a union of all assigned roles."}, {'criteria_id': 'AC-048-03', 'scenario': 'Un-assign a role from a user', 'scenario_type': 'Happy_Path', 'given': "I am an Administrator viewing the details of a user who has both 'Engineer' and 'Operator' roles.", 'when': "I de-select the 'Operator' role and click 'Save'.", 'then': "The system confirms the update, the user's details page now only shows the 'Engineer' role, and the user's permissions are updated accordingly."}, {'criteria_id': 'AC-048-04', 'scenario': 'Non-Administrator attempts to access role assignment functionality', 'scenario_type': 'Error_Condition', 'given': "I am logged in as a user with the 'Engineer' role.", 'when': 'I attempt to navigate to the user management page to assign roles.', 'then': "The system must prevent access and display an 'Access Denied' or '403 Forbidden' error."}, {'criteria_id': 'AC-048-05', 'scenario': 'Attempting to remove the Administrator role from the last administrator in a tenant', 'scenario_type': 'Error_Condition', 'given': "I am the only user with the 'Administrator' role within my tenant.", 'when': "I navigate to my own user profile and attempt to un-assign the 'Administrator' role from myself.", 'then': "The system must prevent the change, and an error message must be displayed, such as 'Cannot remove the Administrator role from the last administrative user in the tenant.'"}, {'criteria_id': 'AC-048-06', 'scenario': 'Cancel changes to role assignments', 'scenario_type': 'Alternative_Flow', 'given': 'I am an Administrator on the role assignment page for a user and have made changes to their roles.', 'when': "I click the 'Cancel' button instead of 'Save'.", 'then': "The system discards all changes, and the user's roles remain as they were before the edit."}], 'user_interface_requirements': {'ui_elements': ['A list of all available roles for the tenant (e.g., using checkboxes or a multi-select component).', "A 'Save' button to commit changes.", "A 'Cancel' button to discard changes.", 'Success and error notifications (e.g., toast messages) to provide feedback on the operation.'], 'user_interactions': ['Administrator selects a user from a user list to navigate to their details/settings page.', "On the user's settings page, the Administrator can check/uncheck roles to modify assignments.", "Clicking 'Save' triggers an API call to update the user's roles.", "Clicking 'Cancel' reverts the UI to its pre-edit state."], 'display_requirements': ["The user's currently assigned roles must be clearly indicated (e.g., checkboxes are pre-checked).", 'The list of available roles must match the roles defined in the system (Administrator, Data Scientist, Engineer, Operator, Viewer).'], 'accessibility_needs': ['All UI elements (checkboxes, buttons) must be keyboard navigable and have appropriate ARIA labels, compliant with WCAG 2.1 Level AA.']}, 'business_rules': [{'rule_id': 'BR-048-01', 'rule_description': "A tenant must have at least one user with the 'Administrator' role at all times.", 'enforcement_point': 'Backend API, before committing the user role update transaction.', 'violation_handling': 'The transaction is rejected, and a specific error message is returned to the client.'}, {'rule_id': 'BR-048-02', 'rule_description': "Only users with the 'Administrator' role can assign or un-assign roles to any user within their own tenant.", 'enforcement_point': 'API Gateway and backend service middleware for every relevant endpoint.', 'violation_handling': "The request is rejected with a '403 Forbidden' status code."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-047', 'dependency_reason': 'A user account must exist before roles can be assigned to it.'}, {'story_id': 'REQ-BIZ-001', 'dependency_reason': 'The system must have a defined set of roles (Administrator, Data Scientist, etc.) and their associated permissions before they can be assigned.'}], 'technical_dependencies': ['Keycloak Identity Provider: User roles are managed within Keycloak. This feature requires integration with the Keycloak Admin API.', 'Backend User Management Service: An API endpoint is required to handle the logic for updating user roles.', 'Frontend User Management UI: A React component in the Central Management Plane is needed for the user interface.'], 'data_dependencies': ['A list of users for the current tenant must be retrievable.', 'A list of all available system roles must be retrievable.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The API response for updating user roles should be < 500ms (P95).', 'Loading the user details page with the list of roles should take < 1 second.'], 'security': ['All API calls for user management must be authenticated and authorized.', "The user's JWT must be updated to reflect their new roles upon their next login or token refresh cycle to ensure permissions are enforced correctly.", 'All changes to user roles must be recorded in the audit trail (REQ-FR-005), logging the administrator who made the change, the user affected, the roles added/removed, and the timestamp.'], 'usability': ["The process of changing a user's roles should be intuitive and require minimal clicks."], 'accessibility': ['The feature must comply with WCAG 2.1 Level AA standards.'], 'compatibility': ['The user interface must function correctly on all supported modern web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Integration with the external Keycloak Admin API.', "Implementing the server-side validation logic for the 'last administrator' rule.", 'Ensuring proper state management in the React frontend.', 'Handling token invalidation/refresh logic to ensure permission changes take effect promptly.'], 'technical_risks': ["A bug in the 'last administrator' check could result in a tenant being locked out from administrative functions.", 'Incorrect API calls to Keycloak could lead to inconsistent state between the application database and the identity provider.'], 'integration_points': ['Backend User Management Service -> Keycloak Admin API', 'Frontend UI -> Backend User Management Service API']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security'], 'test_scenarios': ['Verify an Admin can add/remove roles from another user.', 'Verify an Admin can add/remove roles from their own account.', "Verify the 'last administrator' rule prevents lockout.", 'Verify a non-Admin user cannot access the user management UI or API.', "Verify that after a role change, the user's access to specific features is correctly granted or revoked upon next login."], 'test_data_needs': ['A test tenant with at least two users: one Admin, one non-Admin.', 'A separate test tenant with only a single Admin user to test the lockout prevention rule.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Vitest/React Testing Library for frontend unit tests.', 'Playwright for E2E tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing in the staging environment.', 'Code has been peer-reviewed and merged into the main branch.', 'Unit test coverage for new logic is at or above the 80% project standard.', 'Integration tests confirming successful interaction with Keycloak are passing.', 'E2E automated tests for the primary success and failure scenarios are implemented and passing.', 'Security requirements, including audit logging, have been validated.', 'User interface has been reviewed for usability and accessibility compliance.', 'Relevant documentation (e.g., System Administration Guide) has been updated.', 'The feature has been successfully deployed and verified in the staging environment.'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['Requires a running and accessible Keycloak instance for development and testing.', 'Dependent on the completion of US-047 (Create a New User).', 'The team needs to be familiar with the Keycloak Admin API or allocate time for research.'], 'release_impact': 'This is a core feature for the initial release (MVP) as it is fundamental to system security and administration.'}}