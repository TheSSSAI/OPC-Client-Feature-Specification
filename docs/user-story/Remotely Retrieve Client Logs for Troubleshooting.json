{'story_metadata': {'story_id': 'US-052', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Remotely Retrieve Client Logs for Troubleshooting', 'as_a_user_story': 'As an Administrator, I want to initiate a request from the Central Management Plane to retrieve specific log files from a remote OPC Core Client, so that I can efficiently diagnose and troubleshoot operational issues without needing physical access to the edge device.', 'user_persona': 'Administrator, as defined in REQ-USR-001, responsible for system health and troubleshooting.', 'business_value': 'Reduces Mean Time To Resolution (MTTR) for edge client issues, lowers operational costs by eliminating site visits, and improves overall system supportability and uptime.', 'functional_area': 'Centralized Management and Diagnostics', 'story_theme': 'Remote Operations and System Health'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successfully retrieve logs for a specific time range', 'scenario_type': 'Happy_Path', 'given': 'I am an Administrator logged into the Central Management Plane and viewing the details page for a specific, online OPC Core Client', 'when': "I navigate to the 'Diagnostics' tab, select a time range (e.g., 'Last 6 hours'), a log level (e.g., 'INFO and above'), and click the 'Retrieve Logs' button", 'then': "A log retrieval job is initiated and its status is displayed as 'In Progress' in a history table on the page. The request is securely sent to the client via the MQTT command channel.", 'and': 'The downloaded log file contains only entries matching the specified time range and log level.', 'validation_notes': 'Verify the request payload sent to the client. Verify the contents of the downloaded file. The UI update can be tested via polling or WebSocket/SignalR events.'}, {'criteria_id': 'AC-002', 'scenario': 'Attempt to retrieve logs from an offline client', 'scenario_type': 'Error_Condition', 'given': "I am an Administrator viewing the details page for an OPC Core Client whose status is 'Offline'", 'when': "I navigate to the 'Diagnostics' tab", 'then': "The 'Retrieve Logs' button is disabled, and a message is displayed indicating that log retrieval is unavailable for offline clients.", 'validation_notes': "Verify the UI state based on the client's connection status."}, {'criteria_id': 'AC-003', 'scenario': 'Log retrieval request times out', 'scenario_type': 'Error_Condition', 'given': 'I am an Administrator and have initiated a log retrieval request for an online client', 'when': 'The client fails to package and upload the logs within the system-defined timeout period (e.g., 5 minutes)', 'then': "The job status in the history table updates to 'Failed' with a reason of 'Request timed out'.", 'and': "An entry is made in the system's central audit log noting the failed attempt.", 'validation_notes': 'Simulate a non-responsive client in a test environment to trigger the timeout logic in the Central Management Plane.'}, {'criteria_id': 'AC-004', 'scenario': 'No logs are found for the requested criteria', 'scenario_type': 'Edge_Case', 'given': 'I am an Administrator and have initiated a log retrieval request for a time range where no logs were generated', 'when': 'The client processes the request and finds no matching log entries', 'then': "The job status updates to 'Complete', and a message is displayed in the UI: 'No log entries found for the selected period.'", 'and': 'The download link provides an empty file or a text file containing this message.', 'validation_notes': 'Test against a client with an empty log directory or by requesting a future time range.'}, {'criteria_id': 'AC-005', 'scenario': 'View history of log retrieval requests', 'scenario_type': 'Alternative_Flow', 'given': "I am an Administrator viewing the 'Diagnostics' tab for a specific client", 'when': 'The page loads', 'then': 'A table is displayed showing the last 10 log retrieval requests for this client, including Timestamp, Requested Parameters (time range, level), Status, and a Download link if successful.', 'validation_notes': 'Verify that the history is persistent and correctly associated with the specific client instance.'}], 'user_interface_requirements': {'ui_elements': ["A 'Diagnostics' or 'Logs' tab on the client details page.", "Date/Time range picker or dropdown with predefined ranges (e.g., 'Last hour', 'Last 24 hours', 'Custom').", 'Dropdown for selecting minimum log level (e.g., DEBUG, INFO, WARN, ERROR).', "A 'Retrieve Logs' button.", 'A history table displaying past and current log retrieval jobs with columns for: Request Time, Parameters, Status, and a Download button/link.'], 'user_interactions': ["The 'Retrieve Logs' button should be disabled if the client is offline.", "Initiating a request adds a new row to the history table with an 'In Progress' status.", 'The status of the job in the table should update automatically without a page refresh.'], 'display_requirements': ["Clear feedback on the status of the log retrieval request (e.g., 'In Progress', 'Complete', 'Failed').", "Error messages should be user-friendly (e.g., 'Client is offline', 'Request timed out')."], 'accessibility_needs': ['All UI controls must be keyboard accessible.', 'Status updates should be announced by screen readers.', 'Complies with WCAG 2.1 Level AA standards as per REQ-IFC-001.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'A maximum time range of 7 days can be requested for a single log retrieval to prevent excessive load on the client.', 'enforcement_point': 'UI validation and backend API validation upon request submission.', 'violation_handling': 'The UI will prevent selection of a range greater than 7 days. If an API call violates this, a 400 Bad Request error is returned with a descriptive message.'}, {'rule_id': 'BR-002', 'rule_description': 'Retrieved log packages are retained in cloud storage for a maximum of 14 days before being automatically deleted.', 'enforcement_point': 'Cloud storage (S3) lifecycle policy.', 'violation_handling': 'N/A - automated system process.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-050', 'dependency_reason': 'Requires the central dashboard to list clients and their online/offline status in order to select a client for log retrieval.'}, {'story_id': 'US-068', 'dependency_reason': 'Requires the secure provisioning and communication channel (MQTT v5 over TLS) to be established for sending the command to the client.'}], 'technical_dependencies': ['A functioning MQTT v5 broker and client implementation for command and control, as per REQ-ARC-001.', 'A centralized object storage solution (Amazon S3) for temporary storage of log packages, as per REQ-ARC-002.', 'A standardized logging framework (e.g., Serilog) on the OPC Core Client that produces structured logs which can be queried by timestamp and level.'], 'data_dependencies': ['A registry of all provisioned OPC Core Clients and their current connection status.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The log packaging process on the OPC Core Client must not increase the latency of its primary data acquisition tasks by more than 10%.', 'The UI for log retrieval status should update within 2 seconds of a state change.'], 'security': ['The command to retrieve logs and the log data itself must be transmitted over an encrypted channel (TLS 1.3), as per REQ-IFC-004.', 'The client must upload logs to a pre-signed, time-limited, single-use URL provided by the Central Management Plane to prevent unauthorized uploads.', "Only users with the 'Administrator' role can initiate log retrieval requests."], 'usability': ['The process of selecting a client and retrieving its logs should take no more than 4 clicks from the main dashboard.'], 'accessibility': ['Must adhere to WCAG 2.1 Level AA standards.'], 'compatibility': ['The feature must function correctly on all supported browsers for the Central Management Plane (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires development on both the Central Management Plane (backend and frontend) and the OPC Core Client.', 'The workflow is asynchronous, requiring a robust mechanism for tracking job status (e.g., state machine in the database, real-time UI updates via SignalR).', 'Secure handling of credentials for uploading to object storage (e.g., generating and passing pre-signed S3 URLs).', 'Resource management on the edge client to ensure the log packaging process does not disrupt its core functions.'], 'technical_risks': ['Network instability between the client and the cloud could cause uploads to fail. The client needs a retry mechanism.', 'Large log files could strain memory or CPU on resource-constrained edge devices.'], 'integration_points': ['Central Management Plane API -> MQTT Broker -> OPC Core Client', 'OPC Core Client -> Amazon S3', 'Central Management Plane Backend -> Central Management Plane Frontend (via REST API and SignalR)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security', 'Performance'], 'test_scenarios': ['End-to-end happy path: Request, package, upload, download, verify content.', 'Client offline scenario.', 'Network interruption during upload scenario.', 'Request for a time range with no logs.', 'Request for a very large log file to test performance impact on the client.', 'Role-based access control test: Ensure a non-Administrator user cannot see or use the feature.'], 'test_data_needs': ['A provisioned OPC Core Client in a test environment.', 'Sample log files of varying sizes and with different log levels.', 'User accounts with Administrator and non-Administrator roles.'], 'testing_tools': ['Playwright for E2E testing.', 'A mock MQTT client/server for integration testing the communication protocol.', 'Resource monitoring tools on the client OS to measure performance impact.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two peers', 'Unit and integration tests implemented with >= 80% code coverage and all are passing', 'E2E automated tests for the primary happy path and offline-client scenarios are created and passing', 'User interface reviewed and approved by the UX team', 'Performance impact on the OPC Core Client is measured and within acceptable limits', 'Security review of the pre-signed URL mechanism is completed and approved', 'Feature is documented in the System Administration Guide (REQ-DOC-001)', 'Story deployed and verified in the staging environment (REQ-NFR-008)'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a foundational feature for remote supportability and should be prioritized early.', 'Requires coordinated work between the team working on the Central Plane and the team working on the OPC Core Client.'], 'release_impact': ['Significantly improves the supportability of the product, which is a key selling point for enterprise customers with many distributed sites.']}}