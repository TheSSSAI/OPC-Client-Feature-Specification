{'story_metadata': {'story_id': 'US-065', 'elaboration_date': '2025-01-26', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Use Administrative CLI for Scripting and Bulk Operations', 'as_a_user_story': 'As an Administrator, I want a secure command-line interface (CLI) to manage the system programmatically, so that I can automate repetitive tasks, perform bulk operations efficiently, and integrate system management into our existing operational scripts.', 'user_persona': 'Administrator, as defined in REQ-USR-001, responsible for system setup, user management, and overall system health.', 'business_value': 'Increases operational efficiency by automating repetitive administrative tasks. Enables integration with other IT automation systems and reduces time and errors associated with large-scale management operations (e.g., bulk user provisioning).', 'functional_area': 'System Administration and Operations', 'story_theme': 'Centralized Management and Automation'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful CLI Authentication', 'scenario_type': 'Happy_Path', 'given': 'The Administrator has downloaded the CLI executable and has valid credentials for the Central Management Plane.', 'when': 'The Administrator executes the `login` command with their credentials.', 'then': "The CLI successfully authenticates against the Identity Provider, securely stores a session token locally for subsequent commands, and displays a 'Login successful' message.", 'validation_notes': "Verify that a valid JWT is stored in a secure local configuration file (e.g., in the user's home directory with restricted permissions). Subsequent commands should use this token without requiring re-authentication until it expires."}, {'criteria_id': 'AC-002', 'scenario': 'Failed CLI Authentication', 'scenario_type': 'Error_Condition', 'given': 'The Administrator has the CLI executable.', 'when': 'The Administrator executes the `login` command with invalid credentials.', 'then': "The CLI displays a clear 'Authentication failed. Please check your credentials.' error message, exits with a non-zero status code, and does not store any session token.", 'validation_notes': "Check the CLI's exit code and ensure no token file is created or updated."}, {'criteria_id': 'AC-003', 'scenario': 'Bulk User Creation from CSV', 'scenario_type': 'Happy_Path', 'given': 'The Administrator is authenticated via the CLI.', 'and': "They have a correctly formatted CSV file named 'new_users.csv' with columns for 'email', 'firstName', 'lastName', and 'role'.", 'when': 'They execute the command `sys-cli users create --from-file new_users.csv`.', 'then': "The CLI processes the file, makes API calls to create each user, and outputs a summary report, such as 'Success: 48 users created. Failed: 2 users (see error.log for details).'", 'validation_notes': 'Verify in the Central Management Plane UI or via another CLI command (`users list`) that the users from the CSV file have been created correctly with their assigned roles.'}, {'criteria_id': 'AC-004', 'scenario': 'Attempt Bulk User Creation with Malformed CSV', 'scenario_type': 'Error_Condition', 'given': 'The Administrator is authenticated via the CLI.', 'and': "They have a CSV file with a missing required 'email' column.", 'when': 'They execute the command `sys-cli users create --from-file malformed.csv`.', 'then': "The CLI validates the file, reports an error like 'Error: Input file is missing required column: email', does not attempt to create any users, and exits with a non-zero status code.", 'validation_notes': 'Confirm that no new users were created in the system.'}, {'criteria_id': 'AC-005', 'scenario': 'List OPC Core Clients with Script-Friendly Output', 'scenario_type': 'Happy_Path', 'given': 'The Administrator is authenticated via the CLI.', 'when': 'They execute the command `sys-cli clients list --output json`.', 'then': 'The CLI outputs a well-formed JSON array to standard output, where each object in the array represents an OPC Core Client and contains its ID, name, connection status, and last seen timestamp.', 'validation_notes': 'Pipe the output to a tool like `jq` to validate its structure and content. The output should be machine-parsable without any extraneous text.'}, {'criteria_id': 'AC-006', 'scenario': 'Accessing Command Help', 'scenario_type': 'Happy_Path', 'given': 'The Administrator has the CLI executable.', 'when': 'They execute a command with the help flag, such as `sys-cli --help` or `sys-cli users --help`.', 'then': 'The CLI displays a formatted help message detailing the available commands, sub-commands, and their respective options and arguments.', 'validation_notes': 'Verify that the help text is clear, accurate, and covers all available functionality for the given command context.'}, {'criteria_id': 'AC-007', 'scenario': 'Attempting Admin Command with Insufficient Permissions', 'scenario_type': 'Error_Condition', 'given': "A user with the 'Operator' role has authenticated via the CLI.", 'when': 'They attempt to execute an admin-only command like `sys-cli users create ...`.', 'then': "The CLI receives a 403 Forbidden response from the API and displays a clear 'Error: You do not have permission to perform this action.' message.", 'validation_notes': 'This test verifies that the API gateway and backend services correctly enforce RBAC, and the CLI correctly interprets and reports the authorization failure.'}], 'user_interface_requirements': {'ui_elements': ['Standard command-line input/output (stdin, stdout, stderr).'], 'user_interactions': ['Commands should follow a consistent `noun verb [options]` structure (e.g., `sys-cli users list --tenant-id xyz`).', 'Support for standard flags like `--help`, `--version`, and `--output [text|json]`. ', 'Interactive prompts for sensitive information like passwords during login.', 'Progress indicators (e.g., a progress bar) for long-running operations like bulk imports.'], 'display_requirements': ['Successful operations should output a confirmation message or the requested data to stdout.', 'Errors and warnings should be sent to stderr.', 'Tabular data should be formatted for readability in a standard terminal.'], 'accessibility_needs': ['Ensure output is compatible with standard screen readers by using clean text formats.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "Only users with the 'Administrator' role can execute administrative commands through the CLI.", 'enforcement_point': 'API Gateway and Backend Services (enforced via RBAC on API endpoints).', 'violation_handling': "The API returns a 403 Forbidden status code. The CLI translates this into a user-friendly 'Permission Denied' error message."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-047', 'dependency_reason': 'The backend API endpoint for creating a single user must exist to support bulk creation.'}, {'story_id': 'US-048', 'dependency_reason': 'The backend API endpoint for assigning roles to users must exist.'}, {'story_id': 'US-050', 'dependency_reason': 'The backend API endpoint for listing client instances and their health status must be available.'}], 'technical_dependencies': ['A functioning Identity Provider (Keycloak) supporting OAuth 2.0/OIDC for CLI authentication (e.g., Device Authorization Grant or Client Credentials flow).', 'Published and versioned REST APIs for user and client management, documented with an OpenAPI specification.', 'API Gateway (Kong) configured to secure and route requests from the CLI to the appropriate microservices.'], 'data_dependencies': ['Access to a staging environment with pre-configured tenants, users, and roles for testing.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['CLI startup time should be less than 2 seconds.', 'API response time for list commands should be under 1 second for up to 1,000 items.', 'Bulk creation of 100 users should complete in under 30 seconds.'], 'security': ['All communication between the CLI and the Central Management Plane must be encrypted using TLS 1.3, as per REQ-IFC-004.', 'The CLI must not store user passwords in plain text. Session tokens must be stored securely in a file with restricted permissions.', 'The CLI must use a secure authentication flow (e.g., OAuth 2.0 Device Authorization Grant) to obtain tokens.', 'The CLI itself should be signed to prevent tampering.'], 'usability': ['Command names and flags should be intuitive and consistent.', 'Error messages must be clear and actionable.', 'Comprehensive help text must be available for all commands.'], 'accessibility': ['N/A for a CLI, beyond standard terminal compatibility.'], 'compatibility': ['The CLI must be provided as a self-contained executable for Windows (10+), Linux (Ubuntu 20.04+, RHEL 8+), and macOS (for developer use).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Implementing a secure, user-friendly authentication flow for a command-line application.', 'Designing an extensible command and argument parsing framework.', 'Implementing robust error handling and reporting for bulk operations from files.', 'Creating a build pipeline to produce cross-platform, self-contained executables.'], 'technical_risks': ['The chosen authentication flow may be complex to implement correctly and securely.', 'Poor initial design of the command structure could lead to significant refactoring as more commands are added.', 'Potential for performance bottlenecks in the backend APIs when handling bulk requests.'], 'integration_points': ['Keycloak Identity Provider for authentication.', 'User Management microservice API.', 'Client Management microservice API.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Full authentication lifecycle: login, execute commands, token expiry, logout.', 'Bulk user creation with valid and invalid CSV files.', 'Listing resources (clients, users) with both default and JSON output formats.', 'Testing all commands and options documented in the help text.', 'Permission testing: attempting to run admin commands as a non-admin user.'], 'test_data_needs': ['A set of test user credentials with different roles (Administrator, Operator).', 'Sample CSV files for bulk import (valid, malformed, empty, large).', 'A staging environment populated with at least 10 OPC Core Client instances in various states (connected, disconnected).'], 'testing_tools': ['xUnit for unit tests.', 'A shell scripting framework (like Bash or PowerShell) for E2E test automation.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two team members', 'Unit test coverage for new code is at or above 80%', 'Integration tests against a staging environment are passing', 'CLI executable is successfully built for Windows, Linux, and macOS', 'Security requirements, especially the authentication flow, have been reviewed and approved', 'Basic user documentation (installation, login, and command examples) is written and added to the System Administration Guide (REQ-DOC-001)', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This is a foundational story for administrative automation. Subsequent stories will add more commands to this CLI framework.', 'Requires close collaboration with the backend team to ensure the necessary APIs are available and performant.', 'The secure authentication flow should be designed and reviewed early in the sprint.'], 'release_impact': 'Provides a key feature for power users and enables automation, which is a significant value-add for enterprise customers.'}}