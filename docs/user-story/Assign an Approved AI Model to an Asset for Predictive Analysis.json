{'story_metadata': {'story_id': 'US-032', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Assign an Approved AI Model to an Asset for Predictive Analysis', 'as_a_user_story': "As an Engineer, I want to select a specific asset, browse a library of approved AI models, and assign a model to that asset by mapping its required inputs to the asset's available data tags, so that I can activate predictive analytics, such as anomaly detection or failure prediction, for that piece of equipment.", 'user_persona': 'Engineer (as defined in REQ-USR-001)', 'business_value': 'Operationalizes AI/ML models by linking them to physical assets, enabling predictive maintenance and anomaly detection features (REQ-FR-012, REQ-FR-013). This is a critical step to unlock the value of the AI platform, leading to reduced downtime and improved operational efficiency.', 'functional_area': 'AI/ML Integration & Asset Management', 'story_theme': 'AI Model Deployment and Management'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Happy Path: Successfully assign an approved model to an asset with complete tag mapping', 'scenario_type': 'Happy_Path', 'given': 'I am logged in as an Engineer and am viewing the configuration page for an asset that has multiple OPC tags associated with it', 'when': "I navigate to the 'AI Models' section and click 'Assign Model'", 'then': "A modal or view appears, listing only the AI models from the library that have a status of 'Approved'", 'validation_notes': "Verify that the API call to fetch models includes a filter for `status=Approved`. Models with other statuses (e.g., 'Pending', 'Rejected') must not be in the list."}, {'criteria_id': 'AC-002', 'scenario': 'Map model inputs to asset tags', 'scenario_type': 'Happy_Path', 'given': "I have opened the 'Assign Model' view and selected an approved model from the list", 'when': "The model's required inputs (e.g., 'temperature', 'pressure') are displayed", 'then': 'For each model input, I can select a corresponding OPC tag from a dropdown list containing only the tags already associated with the current asset', 'validation_notes': 'The dropdown for tag selection must be populated by tags linked to the specific asset being configured, not all tags in the system.'}, {'criteria_id': 'AC-003', 'scenario': 'Save the model assignment', 'scenario_type': 'Happy_Path', 'given': "I have selected an approved model and mapped all of its required inputs to the asset's tags", 'when': "I click the 'Save Assignment' button", 'then': 'The system saves the association between the asset, the model (including its version), and the input-to-tag mappings', 'validation_notes': 'Check the database to confirm a new record exists linking the asset ID, model ID, and the specific tag mappings.'}, {'criteria_id': 'AC-004', 'scenario': 'View assigned model', 'scenario_type': 'Happy_Path', 'given': 'I have successfully assigned a model to an asset', 'when': "I view the asset's configuration page", 'then': "The newly assigned model, including its name and version, is listed in the 'AI Models' section for that asset", 'validation_notes': 'The UI should reflect the saved state immediately after a successful assignment.'}, {'criteria_id': 'AC-005', 'scenario': 'Error Condition: Attempt to save assignment with incomplete mapping', 'scenario_type': 'Error_Condition', 'given': "I am assigning a model that requires two inputs ('temp', 'pressure')", 'when': "I map the 'temp' input but leave the 'pressure' input unmapped and click 'Save Assignment'", 'then': "The assignment is not saved, and a clear, user-friendly error message is displayed, indicating that 'All required model inputs must be mapped to a tag'", 'validation_notes': "The 'Save Assignment' button could be disabled until all required fields are filled. The API must reject the request with a 400 Bad Request status and a descriptive error message."}, {'criteria_id': 'AC-006', 'scenario': 'Error Condition: Unauthorized user attempts to assign a model', 'scenario_type': 'Error_Condition', 'given': 'I am logged in as an Operator or Viewer', 'when': "I navigate to an asset's configuration page", 'then': "The 'Assign Model' button and any other model management controls are not visible or are disabled", 'validation_notes': 'Verify UI element visibility based on user role. Also, test the backend API endpoint to ensure it returns a 403 Forbidden error if called by a user without the required permissions.'}, {'criteria_id': 'AC-007', 'scenario': 'Alternative Flow: Un-assign a model from an asset', 'scenario_type': 'Alternative_Flow', 'given': 'I am an Engineer viewing an asset that has an AI model assigned to it', 'when': "I click the 'Remove' or 'Un-assign' button next to the model and confirm the action in a confirmation dialog", 'then': 'The association between the model and the asset is deleted, and the model is removed from the list of assigned models on the UI', 'validation_notes': 'Verify the corresponding record is deleted from the database. The system should log this action in the audit trail (per REQ-FR-005).'}, {'criteria_id': 'AC-008', 'scenario': 'Edge Case: Attempt to assign a model to an asset with no associated tags', 'scenario_type': 'Edge_Case', 'given': 'I am an Engineer viewing an asset that has no OPC tags mapped to it', 'when': "I click 'Assign Model' and select a model", 'then': "The tag mapping UI shows a message like 'No tags available on this asset to map' and the 'Save Assignment' button is disabled", 'validation_notes': 'This prevents a user from getting into a state where they cannot complete the assignment.'}], 'user_interface_requirements': {'ui_elements': ["An 'Assign Model' button on the asset configuration page.", 'A modal or dedicated view for model selection and mapping.', 'A searchable/filterable list of approved AI models, showing name and version.', 'A dynamic mapping interface that lists model inputs and provides dropdowns for tag selection.', "A 'Save Assignment' button.", "A 'Remove' or 'Un-assign' button for existing assignments.", 'A confirmation dialog for the un-assign action.'], 'user_interactions': ['User clicks to open the assignment modal.', 'User selects a model from the list.', 'User selects a tag from a dropdown for each model input.', 'User receives immediate validation feedback if mappings are incomplete.', 'User confirms removal of an assigned model.'], 'display_requirements': ["The list of assignable models must only show 'Approved' models.", 'The version of the selected/assigned model must be clearly visible.', 'Error messages must be clear and specific.', 'The list of tags available for mapping must be scoped to the current asset.'], 'accessibility_needs': ['All UI controls (buttons, dropdowns, lists) must be keyboard accessible.', 'Form fields for mapping must have associated labels.', 'Error messages must be associated with the relevant controls for screen readers (using `aria-describedby`).']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "Only AI models with a status of 'Approved' can be assigned to an asset.", 'enforcement_point': 'Backend API when fetching the list of assignable models and on the server-side validation when saving an assignment.', 'violation_handling': 'Models with other statuses are not returned in the list. If an invalid model ID is submitted via the API, a 400 Bad Request error is returned.'}, {'rule_id': 'BR-002', 'rule_description': "All required inputs for a selected AI model must be mapped to an asset's tags before the assignment can be saved.", 'enforcement_point': 'Frontend UI (disabling save button) and Backend API upon submission.', 'violation_handling': 'UI displays an error message. API returns a 400 Bad Request error with details about the missing mappings.'}, {'rule_id': 'BR-003', 'rule_description': "Only users with the 'Engineer' or 'Administrator' role can assign, modify, or un-assign AI models from assets.", 'enforcement_point': 'UI (hiding/disabling controls) and Backend API endpoint authorization.', 'violation_handling': 'UI controls are not rendered. API returns a 403 Forbidden error.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-025', 'dependency_reason': 'An asset entity must exist in the system to which a model can be assigned.'}, {'story_id': 'US-026', 'dependency_reason': 'Assets must have associated OPC tags to serve as inputs for the AI model mapping.'}, {'story_id': 'US-028', 'dependency_reason': "An AI model must be imported into the system's model library before it can be assigned."}, {'story_id': 'US-031', 'dependency_reason': "The model approval workflow must be implemented, as only 'Approved' models can be assigned."}], 'technical_dependencies': ['Backend API endpoint to fetch approved models.', 'Backend API endpoint to create/delete asset-model assignments.', 'Database schema to support a many-to-many relationship with mapping details between assets and models.'], 'data_dependencies': ["Requires test data: at least one asset with associated tags, and at least one AI model in an 'Approved' state."], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The list of approved models should load in the UI within 2 seconds for up to 1000 models.', 'Saving the model assignment should complete within 500ms.'], 'security': ['API endpoints must be protected and only accessible by authorized roles (Engineer, Administrator) as per REQ-USR-001.', 'All data must be validated server-side to prevent invalid assignments.'], 'usability': ['The mapping process should be intuitive, minimizing clicks and providing clear guidance.', 'Error feedback must be immediate and easy to understand.'], 'accessibility': ['The feature must comply with WCAG 2.1 Level AA standards.'], 'compatibility': ['The user interface must function correctly on all supported browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The UI for dynamically displaying model inputs and mapping them to tags requires careful state management.', 'The backend requires a new database table and associated logic to manage the mappings.', 'Requires robust validation on both the client and server.', 'Integration between the Asset Management and AI Model Management modules.'], 'technical_risks': ['Potential for poor user experience if the mapping interface is not intuitive.', 'The data model for storing the mappings must be flexible enough to handle different models with varying numbers of inputs.'], 'integration_points': ['Reads from the AI Model repository/database.', 'Reads from the Asset and Tag repository/database.', 'Writes to a new `AssetModelMapping` table or equivalent.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security'], 'test_scenarios': ['Verify an Engineer can assign and un-assign a model.', 'Verify an Operator cannot see the assignment controls.', 'Verify saving fails if mappings are incomplete.', 'Verify only approved models are shown in the selection list.', "Verify the UI correctly reflects the assigned model's state after saving."], 'test_data_needs': ["A tenant with users in 'Engineer' and 'Operator' roles.", 'An asset with at least 3 associated OPC tags.', 'An asset with zero associated OPC tags.', "AI models in 'Approved', 'Pending', and 'Rejected' states."], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E testing.', 'Postman or similar for API integration testing.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit and integration tests implemented with >80% code coverage for new logic', 'E2E tests for the happy path and key error conditions are implemented and passing', 'User interface reviewed and approved by the UX/UI designer', 'Performance requirements for API endpoints and UI load times are verified', 'Security requirements (role-based access) are validated', 'User documentation (manuals, help text) for this feature is updated', 'Story deployed and verified in the staging environment by QA'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This story is blocked until all prerequisite stories (US-025, US-026, US-028, US-031) are completed and deployed.', 'Requires collaboration between frontend and backend developers throughout the sprint.'], 'release_impact': ['This is a cornerstone feature for the AI/ML value proposition. Its completion is critical for any release that includes predictive analytics.']}}