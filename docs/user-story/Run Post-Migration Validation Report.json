{'story_metadata': {'story_id': 'US-062', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Run Post-Migration Validation Report', 'as_a_user_story': "As an Engineer, I want to generate a detailed validation report immediately after a bulk data import, so that I can quickly verify the completeness and correctness of the migration, identify any specific errors, and ensure the system's configuration data is accurate and reliable.", 'user_persona': 'Engineer. This user is responsible for system configuration, including setting up asset hierarchies and tag lists, often from legacy systems. Data accuracy is critical for their role.', 'business_value': 'Ensures data integrity for foundational system configuration. Provides an auditable record of data migration activities, reduces manual verification effort by hours or days, and builds user trust by making the import process transparent and verifiable.', 'functional_area': 'Data Management and Migration', 'story_theme': 'System Configuration and Setup'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Report for a fully successful migration', 'scenario_type': 'Happy_Path', 'given': 'An Engineer has successfully completed a bulk import job with a CSV file containing 100 assets and 500 tags, and all records were valid.', 'when': "The Engineer navigates to the 'Data Migration History' page and clicks 'Generate Report' for that specific job.", 'then': 'A report is generated and displayed on the screen within 10 seconds.', 'validation_notes': "Verify the report summary shows the correct source filename, timestamp, and user. Check that the 'Records in Source' and 'Records Imported' counts both show 100 for assets and 500 for tags. Confirm the 'Failed Records' count is 0 and the error log section is empty. An option to download the report as a PDF must be present."}, {'criteria_id': 'AC-002', 'scenario': 'Report for a migration with validation errors', 'scenario_type': 'Error_Condition', 'given': 'An Engineer has completed a bulk import job where the source file contained 10 invalid records (e.g., tags pointing to non-existent parent assets).', 'when': 'The Engineer generates the validation report for this job.', 'then': "The report's summary section shows a 'Completed with Errors' status.", 'validation_notes': "Verify the record counts show a mismatch between 'Records in Source' and 'Records Imported'. Confirm the 'Failed Records' count is 10. The 'Error Details' section must list all 10 failed records, including the source file row number, the problematic data, and a clear, human-readable error message for each (e.g., 'Row 78: Parent Asset ID 'P-123-X' not found.')."}, {'criteria_id': 'AC-003', 'scenario': 'Download failed records for correction', 'scenario_type': 'Alternative_Flow', 'given': 'A validation report for a migration with failed records is being viewed.', 'when': "The Engineer clicks the 'Download Failed Records (CSV)' button.", 'then': 'The system initiates a download of a CSV file.', 'validation_notes': 'Verify the downloaded CSV file contains only the rows that failed to import from the original source file. The file should retain the original headers and data, making it easy for the user to correct and re-upload.'}, {'criteria_id': 'AC-004', 'scenario': 'Report generation for a historical job', 'scenario_type': 'Edge_Case', 'given': 'Multiple import jobs have been run over the past month.', 'when': 'The Engineer selects a job from two weeks ago from the migration history list and generates its report.', 'then': 'The system generates a report that accurately reflects the results of that specific historical job.', 'validation_notes': 'Confirm that the report details (timestamp, counts, errors) match the selected historical job and not the most recent one. This ensures the reporting is correctly linked to the job ID.'}, {'criteria_id': 'AC-005', 'scenario': 'Attempting to generate a report for a job that is still in progress', 'scenario_type': 'Error_Condition', 'given': "An Engineer is on the 'Data Migration History' page and a large import job is currently running.", 'when': 'The Engineer attempts to generate a report for the in-progress job.', 'then': "The 'Generate Report' action is disabled or, if clicked, a message appears stating 'Report is not available until the import job is complete.'", 'validation_notes': "Check the UI to ensure the action is disabled for jobs with a status of 'In Progress' or 'Pending'."}], 'user_interface_requirements': {'ui_elements': ["A 'Data Migration History' table listing past and present import jobs (with status, timestamp, user, filename).", "A 'Generate Report' button/link for each completed job in the history table.", 'A dedicated report view page or modal.', "A 'Download PDF Report' button on the report view.", "A 'Download Failed Records (CSV)' button, which is only visible/enabled if there are failed records."], 'user_interactions': ['User can sort and filter the migration history table.', "Clicking 'Generate Report' opens the report view.", 'Clicking download buttons initiates a file download in the browser.'], 'display_requirements': ['Report must be clearly structured with sections: Summary (Job ID, Filename, Timestamp, User, Status), Record Counts (by entity type: Source, Imported, Failed), and Error Details (Row, Data, Error Message).', 'Error messages must be user-friendly and actionable.'], 'accessibility_needs': ['The report must be screen-reader accessible.', 'Download buttons must have appropriate ARIA labels.', 'The report data table must use proper `<th>` and `<td>` tags for structure.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "Validation reports can only be generated for migration jobs with a status of 'Completed' or 'Completed with Errors'.", 'enforcement_point': 'User Interface and API endpoint for report generation.', 'violation_handling': 'The UI action will be disabled for jobs with other statuses. The API will return a 400 Bad Request error if a report is requested for an in-progress or pending job.'}, {'rule_id': 'BR-002', 'rule_description': 'Generated reports are immutable and reflect the exact outcome of the migration job at the time of its completion.', 'enforcement_point': 'Backend report generation service.', 'violation_handling': 'The report is generated from historical log data associated with the job ID, not from the current state of the database, ensuring historical accuracy.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-061', 'dependency_reason': 'This story validates the outcome of the bulk import functionality. The import process must be implemented first and must log detailed results for each row for this report to consume.'}, {'story_id': 'US-025', 'dependency_reason': 'The underlying asset hierarchy data model and business logic must exist for the import and validation to function.'}], 'technical_dependencies': ['A persistent data store (e.g., PostgreSQL) to log migration job history and detailed row-level results.', 'A backend service capable of generating files (PDF, CSV) on demand.', 'A frontend framework (React) to render the history table and report view.'], 'data_dependencies': ['Requires access to the detailed logs produced by the data migration service (from US-061).'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['For an import job of up to 10,000 records, the validation report must be generated and rendered on-screen in under 10 seconds.', 'Downloading the failed records CSV (up to 10,000 records) should start in under 5 seconds.'], 'security': ["Access to the migration history and reports must be restricted to users with 'Engineer' or 'Administrator' roles, as defined in REQ-USR-001.", 'The file download endpoints must be secured and validate user permissions before serving the file.'], 'usability': ['Error messages in the report must be clear and provide enough context for an Engineer to easily locate and fix the problem in the source file.'], 'accessibility': ['The report UI must comply with WCAG 2.1 Level AA standards.'], 'compatibility': ['The report view must render correctly on all supported modern web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The data model for storing migration job results must be efficient, especially for jobs with many errors.', 'The logic for the bulk import process (US-061) must be designed to capture detailed, row-level success/failure information transactionally.', 'Integration of a PDF generation library and designing a well-formatted report template can be time-consuming.', 'Ensuring performant report generation for large import files requires optimized database queries.'], 'technical_risks': ['The import process might fail to log errors correctly, leading to inaccurate reports.', 'Poor database query performance could cause long load times for reports on large migration jobs.'], 'integration_points': ['Backend: Tightly integrates with the data migration service.', 'Database: Reads from the migration jobs and migration log tables.', 'Frontend: A new route and components will be needed for the migration history and report view.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Performance'], 'test_scenarios': ['Test with a perfectly valid import file.', 'Test with a file containing various types of errors (missing required fields, invalid data formats, duplicate keys, broken parent-child relationships).', 'Test with a very large file (e.g., 20,000+ records) to validate performance requirements.', "Test role-based access control to ensure an 'Operator' cannot access the report.", 'Test downloading and validating the contents of both the PDF report and the failed records CSV.'], 'test_data_needs': ['A set of CSV files: one with 100% valid data, one with a mix of valid and invalid data, one with only invalid data, and one large-scale valid file.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E testing of the UI flow.', 'A load testing tool (e.g., k6) for the report generation API endpoint.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two peers', 'Unit test coverage for the report generation logic is above 85%', 'Integration tests confirm correct data flow from migration job logs to the final report', 'E2E tests successfully simulate user interaction and file downloads', 'Performance tests confirm report generation meets time requirements for large datasets', 'Security role checks are implemented and verified', 'UI has been reviewed for usability and adherence to style guides', 'Documentation for the data migration and validation feature is updated', 'Story deployed and verified in the staging environment by a QA engineer'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['This story is blocked by US-061 and cannot be started until the data model and logging for the import process are finalized.', 'Requires both backend (API, PDF/CSV generation) and frontend (UI components) development effort.'], 'release_impact': 'This is a critical feature for ensuring a reliable and trustworthy data onboarding experience. Its absence would significantly increase the risk and manual effort of system setup for new customers.'}}