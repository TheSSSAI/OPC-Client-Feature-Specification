{'story_metadata': {'story_id': 'US-071', 'elaboration_date': '2025-01-24', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Export Diagnostic Package for Support', 'as_a_user_story': 'As an Administrator, I want to generate and download a secure, comprehensive diagnostic package for a specific OPC Core Client instance, so that I can efficiently provide the support team with all the necessary information to troubleshoot and resolve system issues quickly.', 'user_persona': 'Administrator: Responsible for system setup, user management, security configuration, and overall system health. This user is the primary technical contact for support engagements.', 'business_value': 'Significantly reduces the Mean Time To Resolution (MTTR) for support incidents by providing a standardized, comprehensive set of diagnostic data upfront. This improves support team efficiency and minimizes customer operational disruption.', 'functional_area': 'System Administration and Support', 'story_theme': 'Centralized Management and Diagnostics'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful generation and download of a diagnostic package for a connected client', 'scenario_type': 'Happy_Path', 'given': 'I am an Administrator logged into the Central Management Plane and viewing the details page of a connected OPC Core Client', 'when': "I click the 'Generate Support Package' button", 'then': "The system must initiate an asynchronous background job, display a non-blocking message like 'Generating support package...', and upon completion, automatically trigger a browser download of a single .zip file named '[client-name]_diagnostics_[timestamp].zip'.", 'validation_notes': 'Verify the file is downloaded, has the correct naming convention, and the UI provides appropriate feedback throughout the process.'}, {'criteria_id': 'AC-002', 'scenario': 'Verification of diagnostic package contents', 'scenario_type': 'Happy_Path', 'given': 'I have successfully downloaded a diagnostic package for a connected client', 'when': 'I extract and inspect the contents of the .zip file', 'then': "The package must contain:\n1. A manifest.json file detailing the client ID, generation timestamp, and a list of included files.\n2. A 'client' directory containing:\n   - Sanitized configuration files (e.g., config.json).\n   - Application logs from the OPC Core Client for the last 72 hours.\n   - A system_info.txt file (OS, client version, CPU/Memory/Disk usage snapshot, network status).\n3. A 'server' directory containing:\n   - Logs from the Central Management Plane's services that are correlated to this specific client ID for the last 72 hours.", 'validation_notes': 'Manually inspect the package to ensure all specified files and directories are present and correctly populated.'}, {'criteria_id': 'AC-003', 'scenario': 'Verification of data sanitization within the package', 'scenario_type': 'Error_Condition', 'given': 'I have downloaded a diagnostic package generated from a client with sensitive data in its configuration and logs', 'when': 'I perform a text search across all files within the package for known secrets (passwords, API keys, tokens, PII)', 'then': "No sensitive data must be present in plain text. All instances must be replaced with a '[REDACTED]' placeholder.", 'validation_notes': 'This requires a security-focused test. Use sample configuration and log files with known secrets to verify the redaction logic is effective and does not corrupt the file structure.'}, {'criteria_id': 'AC-004', 'scenario': 'Attempting to generate a package for an offline client', 'scenario_type': 'Alternative_Flow', 'given': 'I am an Administrator viewing the details page of an OPC Core Client that is currently disconnected', 'when': "I click the 'Generate Support Package' button", 'then': "The system must generate a partial package containing only the data available on the Central Management Plane (e.g., historical connection logs) and display a clear warning message in the UI, such as 'Package generated with server-side data only. Client is offline and could not provide its logs or configuration.'", 'validation_notes': "Verify the UI warning appears and that the downloaded package contains the 'server' directory but the 'client' directory is either absent or contains a note about the client being offline."}, {'criteria_id': 'AC-005', 'scenario': 'System fails to generate the diagnostic package', 'scenario_type': 'Error_Condition', 'given': 'I am an Administrator attempting to generate a support package', 'when': 'The generation process fails due to an internal system error (e.g., disk space, permissions)', 'then': "The UI must display a user-friendly error message, such as 'Failed to generate support package. Please try again or contact support.' The detailed error stack trace must be logged in the centralized logging system for internal analysis.", 'validation_notes': 'Simulate a failure condition in the backend (e.g., by making a temporary directory read-only) and verify the frontend displays the correct error message and a detailed error is logged.'}], 'user_interface_requirements': {'ui_elements': ["A 'Generate Support Package' button on the OPC Core Client details view.", "A non-blocking toast or notification area to display status messages ('Generating...', 'Download starting...', 'Failed...')."], 'user_interactions': ['Clicking the button initiates the process.', 'The user can continue to navigate the application while the package is being generated in the background.', 'The file download should be initiated automatically by the browser upon successful package creation.'], 'display_requirements': ['The button should be clearly labeled and placed in an administrative actions section of the page.', 'Feedback messages must be clear and concise.'], 'accessibility_needs': ['The button must be keyboard accessible and have a proper ARIA label.', 'Status notifications must be announced by screen readers using ARIA live regions.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'All diagnostic packages must be sanitized to remove sensitive information before being made available for download. This includes, but is not limited to, passwords, API keys, tokens, private certificates, and any data classified as PII.', 'enforcement_point': 'During the package generation process on the backend, before the archive is finalized.', 'violation_handling': 'If sanitization fails for any reason, the package generation process must be aborted, and an error must be logged.'}, {'rule_id': 'BR-002', 'rule_description': 'The scope of logs included in the package is limited to the 72 hours preceding the generation request to manage package size and performance.', 'enforcement_point': 'During the data gathering phase of the package generation job.', 'violation_handling': 'The log query must strictly enforce this time window.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-050', 'dependency_reason': "This story requires the Central Management Dashboard's client details view to exist as a location for the UI trigger."}, {'story_id': 'US-052', 'dependency_reason': 'This story depends on the underlying mechanism to remotely request and retrieve logs from a distributed client, which is defined in US-052.'}], 'technical_dependencies': ['A centralized logging infrastructure (e.g., OpenSearch as per REQ-MON-001) that allows for querying logs by client ID.', 'A secure communication channel (gRPC/MQTT as per REQ-ARC-001) to the OPC Core Client to request its data.', 'A background job processing framework (e.g., Hangfire, Quartz.NET) to handle the asynchronous generation.'], 'data_dependencies': ['Access to the configuration database to retrieve client metadata.', 'Access to the centralized log store.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The package generation process on the OPC Core Client must not consume more than 10% of its CPU resources to avoid impacting its primary data acquisition functions.', 'The end-to-end generation and download initiation for a standard client should complete within 60 seconds.'], 'security': ['The data sanitization process (BR-001) is a critical security requirement.', "The API endpoint to trigger package generation must be protected and only accessible by users with the 'Administrator' role.", 'Generated packages stored temporarily on the server must be in a secure, non-public location and deleted immediately after the download is served.'], 'usability': ['The process should be a simple, one-click action for the Administrator.', 'Feedback provided to the user must be clear and timely.'], 'accessibility': ['The feature must comply with WCAG 2.1 Level AA standards.'], 'compatibility': ['The download functionality must be compatible with all supported modern web browsers (Chrome, Firefox, Edge, Safari).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Developing a robust and secure data sanitization engine is the primary complexity.', 'Orchestrating the asynchronous collection of data from multiple sources (live client, central logs, database).', 'Implementing a reliable background job with clear status reporting to the frontend.'], 'technical_risks': ['The sanitization logic might miss a new or unusual format for a secret, leading to a data leak. This risk must be mitigated with thorough testing and a well-defined set of redaction patterns.', 'Network latency or instability could cause the data request to the remote client to time out or fail.'], 'integration_points': ['Central Management Plane Backend API', 'OPC Core Client (via gRPC/MQTT for data request)', 'Centralized Logging System (OpenSearch)', 'Configuration Database (PostgreSQL)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security', 'Performance'], 'test_scenarios': ['End-to-end test of generating and downloading a package for an online client.', 'End-to-end test for an offline client.', 'Specific security tests to validate the sanitization logic by attempting to include various types of secrets in config/logs and verifying they are redacted.', 'Test the failure path where the backend job fails and the UI displays an error.', 'Performance test to measure the resource impact on the OPC Core Client during package generation.'], 'test_data_needs': ['Sample OPC Core Client configuration files containing placeholder secrets.', 'Sample log files (client and server) containing placeholder secrets and PII.', 'A test environment with at least one online and one offline client instance.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Playwright for E2E tests.', 'A security scanning tool or manual review process for validating sanitization.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two team members', 'Unit test coverage for the sanitization logic is above 90%', 'Integration testing of the entire data aggregation and packaging flow is completed successfully', 'E2E tests are automated and passing in the CI/CD pipeline', 'A formal security review of the sanitization implementation has been completed and signed off', 'Performance impact on the client has been measured and is within acceptable limits', 'User documentation in the System Administration Guide is updated', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['Requires collaboration between frontend and backend developers.', 'Time must be allocated within the sprint for a dedicated security review of the sanitization code.', 'Dependent stories US-050 and US-052 must be completed in a prior sprint.'], 'release_impact': 'This is a key feature for improving the supportability of the product and is highly requested by early adopters and internal support teams.'}}