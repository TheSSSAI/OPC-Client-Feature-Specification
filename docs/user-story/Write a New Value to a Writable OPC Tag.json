{'story_metadata': {'story_id': 'US-003', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Write a New Value to a Writable OPC Tag', 'as_a_user_story': 'As an authorized Operator, I want to securely write a new value to a specific, writable process tag, so that I can adjust operational setpoints and directly control the industrial process.', 'user_persona': 'Operator. This functionality may also be used by Engineer or Administrator roles depending on their assigned permissions.', 'business_value': 'Enables direct, real-time control over industrial processes, allowing users to adjust setpoints, change equipment states, and respond to operational needs. This is a fundamental capability for any process monitoring and control system.', 'functional_area': 'Real-Time Data Access & Control', 'story_theme': 'Core OPC Client Functionality'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful write to a numeric tag', 'scenario_type': 'Happy_Path', 'given': "I am an Operator logged into the system and I have write permissions for the numeric tag 'Reactor_Setpoint'", 'when': 'I navigate to a view showing this tag, enter a new valid numeric value (e.g., 150.5), and confirm the write action', 'then': "The UI should briefly indicate a 'pending' state, the write request is sent, and upon success, the UI updates to display the new value '150.5'. A success notification is shown, and a detailed entry is created in the audit trail.", 'validation_notes': 'Verify the tag value updates on the UI and in the OPC server. Check the audit log for an entry containing the user, tag, old value, and new value as per REQ-FR-005.'}, {'criteria_id': 'AC-002', 'scenario': 'Attempt to write with insufficient permissions', 'scenario_type': 'Error_Condition', 'given': "I am a user with a 'Viewer' role (read-only permissions) logged into the system", 'when': "I view a writable tag like 'Reactor_Setpoint'", 'then': "The UI must not provide any control or option to write a new value (e.g., the input field is disabled or absent). Any attempt to bypass the UI and call the API directly must result in a '403 Forbidden' error.", 'validation_notes': 'Verify UI elements for writing are disabled. Use developer tools or an API client to confirm the API endpoint rejects the request for this user role.'}, {'criteria_id': 'AC-003', 'scenario': 'Attempt to write an invalid data type', 'scenario_type': 'Error_Condition', 'given': "I am an authorized Operator attempting to write to the numeric tag 'Reactor_Setpoint'", 'when': "I enter a non-numeric value like 'abc' and try to confirm", 'then': "The UI must display a validation error message (e.g., 'Invalid value. Please enter a number.') and must prevent the write request from being sent to the server.", 'validation_notes': 'Test with various data types: strings in numeric fields, numbers in boolean fields, etc. Ensure client-side validation works.'}, {'criteria_id': 'AC-004', 'scenario': 'OPC server rejects the write request', 'scenario_type': 'Error_Condition', 'given': "I am an authorized Operator writing a validly formatted value to 'Reactor_Setpoint'", 'when': 'I confirm the write, but the OPC server rejects it (e.g., value is out of the allowed range, or a device interlock is active)', 'then': "The UI must display a specific error message (e.g., 'Write failed: Server rejected the value with status 'Bad_OutOfRange'.') and the displayed tag value must revert to its previous state. The failed attempt should be logged.", 'validation_notes': 'Requires a test environment or mock server that can be configured to reject write requests with specific OPC status codes.'}, {'criteria_id': 'AC-005', 'scenario': 'Attempt to write to a read-only tag', 'scenario_type': 'Edge_Case', 'given': "I am an authorized Operator viewing a tag whose 'AccessLevel' attribute on the OPC server is read-only", 'when': 'I view this tag in the UI', 'then': 'The UI must visually indicate that the tag is read-only, and all write functionality for this specific tag must be disabled.', 'validation_notes': "Verify that the client correctly interprets the tag's AccessLevel attribute from the server."}, {'criteria_id': 'AC-006', 'scenario': 'Write action requires an electronic signature', 'scenario_type': 'Alternative_Flow', 'given': 'The system is configured to comply with 21 CFR Part 11, and I am an authorized Operator writing to a critical setpoint', 'when': 'I enter a new value and confirm the write action', 'then': 'A dialog must appear prompting me to re-enter my password and provide a reason for the change. Upon successful authentication, the write is executed, and the audit log entry is linked to my electronic signature.', 'validation_notes': 'Verify the e-signature dialog appears for configured tags and that the write is only sent after successful re-authentication.'}], 'user_interface_requirements': {'ui_elements': ["An input field or control (e.g., text box, toggle switch, dropdown) appropriate for the tag's data type.", "A confirmation button (e.g., 'Apply', 'Write').", 'A cancellation button.', 'Toast/notification component for success or error feedback.', 'Visual indicator for read-only tags.', 'Modal dialog for electronic signature (if applicable).'], 'user_interactions': ['User clicks or taps on a tag value to initiate edit mode.', 'User types or selects a new value.', "User clicks 'Apply' to submit the change.", 'The system provides immediate visual feedback (pending, success, failure).', 'For invalid input, an error message appears next to the input field.'], 'display_requirements': ['The current value of the tag must be clearly visible.', "The tag's engineering units (if available) should be displayed.", 'Error messages must be clear and user-friendly.'], 'accessibility_needs': ['All input fields and buttons must be keyboard accessible and have proper labels for screen readers, compliant with WCAG 2.1 AA (REQ-IFC-001).']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "A user must have explicit 'write' permissions for a specific tag, asset, or area to perform a write operation.", 'enforcement_point': 'Backend API Gateway and microservice layer.', 'violation_handling': 'The API request is rejected with a 403 Forbidden status code.'}, {'rule_id': 'BR-002', 'rule_description': 'All successful tag write operations must be recorded in the tamper-evident audit trail.', 'enforcement_point': 'The backend microservice responsible for handling write commands.', 'violation_handling': 'The write operation should still proceed, but a high-severity system alert must be generated indicating an audit logging failure.'}, {'rule_id': 'BR-003', 'rule_description': 'For systems configured for 21 CFR Part 11 compliance, critical write operations must require an electronic signature.', 'enforcement_point': 'Backend API, triggered by a flag on the tag or asset configuration.', 'violation_handling': 'The write request is rejected if a valid electronic signature is not provided.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-002', 'dependency_reason': "The UI for viewing a tag's real-time data is the foundation upon which the write functionality will be built."}, {'story_id': 'US-048', 'dependency_reason': "The system for assigning roles and permissions must exist to determine if a user is 'authorized' to write."}, {'story_id': 'US-014', 'dependency_reason': 'The audit trail logging mechanism must be implemented to record the write action as required by the acceptance criteria.'}], 'technical_dependencies': ['A functioning OPC Core Client capable of establishing a connection to an OPC server.', 'The secure communication channel (gRPC/MQTT) between the Central Management Plane and the OPC Core Client must be established (REQ-ARC-001).', 'The RBAC service/module for permission checking.'], 'data_dependencies': ['A configured connection to at least one OPC server with known writable tags.', 'User accounts with defined roles (e.g., Operator, Viewer).'], 'external_dependencies': ['The target OPC DA, UA, or XML-DA server must be available and correctly configured.']}, 'non_functional_requirements': {'performance': ['The end-to-end latency from user confirmation to UI feedback (success/fail) should be under 500ms under normal network conditions (as per REQ-NFR-001).'], 'security': ['All write requests must be authenticated and authorized.', 'The new value must be sanitized to prevent injection attacks, even if the context is industrial protocols.', 'Communication between all system components must be encrypted via TLS 1.3 (REQ-IFC-004).'], 'usability': ['The process of writing a value should be intuitive, requiring minimal steps.', 'Feedback to the user must be immediate and unambiguous.'], 'accessibility': ['Must adhere to WCAG 2.1 Level AA standards (REQ-IFC-001).'], 'compatibility': ['Functionality must work correctly on all supported browsers (Chrome, Firefox, Edge, Safari) as per REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires full-stack implementation: Frontend UI, Central Plane API, and logic on the distributed OPC Core Client.', 'Handling various OPC server behaviors and error codes gracefully.', 'Ensuring the security and audit trail requirements are robustly implemented.', 'State management on the frontend to handle pending, success, and error states without race conditions.'], 'technical_risks': ['Latency in the communication chain (UI -> Central Plane -> Core Client -> OPC Server -> back) could lead to a poor user experience.', 'Inconsistent error reporting from different vendor OPC servers may require an abstraction layer to normalize feedback to the user.'], 'integration_points': ['User Authentication/Authorization Service (Keycloak).', 'Audit Logging Service.', 'OPC Core Client via gRPC/MQTT command channel.', 'OPC Foundation .NET Standard Library for the actual OPC UA/DA communication.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Security'], 'test_scenarios': ['Successful write for each supported data type (bool, int, float, string).', 'Attempted write by a user with read-only permissions.', 'Attempted write of an invalid value (e.g., string into a float tag).', 'Simulate OPC server rejecting a write and verify UI feedback.', 'Simulate network failure between Central Plane and Core Client.', 'Verify audit log entries are correctly created with all required data.', 'E2E test of the electronic signature flow.'], 'test_data_needs': ['A test OPC server with a variety of writable and read-only tags of different data types.', 'User accounts with different roles (Administrator, Engineer, Operator, Viewer).'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'Vitest/React Testing Library for frontend unit tests.', 'Playwright for E2E tests.', 'A mock OPC UA server for integration testing.']}, 'definition_of_done': ['All acceptance criteria validated and passing in a staging environment.', 'Code has been peer-reviewed and merged into the main branch.', 'Unit test coverage for new code meets the project standard (80% as per REQ-NFR-006).', 'Integration tests covering the API-to-Client communication are implemented and passing.', 'E2E automated tests for the happy path and key error conditions are passing.', 'Security review has been conducted on the API endpoint.', 'User-facing documentation (if any) has been updated.', 'Verified on all supported browsers and platforms.'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This is a foundational feature for user interaction. It is a high-priority item once the prerequisite stories (viewing data, user roles) are complete.', 'Requires coordination between frontend and backend developers.'], 'release_impact': ['Enables a major piece of core functionality expected by users. Its absence would be a significant gap in an MVP release.']}}