{'story_metadata': {'story_id': 'US-023', 'elaboration_date': '2025-01-18', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Configure OPC Server Redundancy for High Availability', 'as_a_user_story': 'As an Engineer, I want to configure a primary and backup OPC server connection pair, including defining failover triggers and health check parameters, so that the system automatically switches to the backup server upon primary server failure, ensuring continuous data collection and system reliability.', 'user_persona': 'Engineer: A technical user responsible for configuring and maintaining data source connections, ensuring the system is robust and resilient to common failure modes.', 'business_value': 'Ensures high availability and prevents data loss from a single OPC server failure (due to maintenance, network issues, or crash). This increases overall system reliability, data integrity, and trust in the platform for critical monitoring and control applications.', 'functional_area': 'Core OPC Client and Asset Management Features', 'story_theme': 'System Reliability and High Availability'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Happy Path: Successfully configure a new redundant server pair', 'scenario_type': 'Happy_Path', 'given': 'I am an authenticated Engineer on the OPC server connection configuration page', 'when': "I create a new connection, select the 'Redundant Pair' option, provide valid connection details for a Primary server and a Backup server, define health check and failover parameters, and save the configuration", 'then': 'The system validates and saves the redundant pair configuration as a single logical connection.', 'validation_notes': 'Verify the configuration is persisted in the database. The OPC Core Client should log an attempt to connect to the specified Primary server.'}, {'criteria_id': 'AC-002', 'scenario': 'Happy Path: Automatic failover to backup server', 'scenario_type': 'Happy_Path', 'given': 'A redundant server pair is configured and actively connected to the Primary server, with active data subscriptions', 'when': 'The Primary OPC server becomes unavailable (e.g., service is stopped or network is disconnected)', 'then': 'The system detects the failure, automatically connects to the Backup server, and re-establishes all active data subscriptions.', 'validation_notes': "Monitor system logs for the failover event. Verify in the UI that the connection status updates to 'Connected (Backup)'. Confirm that real-time data continues to flow from the backup server."}, {'criteria_id': 'AC-003', 'scenario': 'Happy Path: Automatic failback to primary server', 'scenario_type': 'Happy_Path', 'given': 'The system has failed over and is currently connected to the Backup server', 'when': 'The Primary OPC server becomes available and stable again', 'then': "The system's periodic health check detects the Primary server's recovery, automatically switches the connection back to the Primary server, and re-establishes all subscriptions.", 'validation_notes': "Monitor system logs for the failback event. Verify in the UI that the connection status returns to 'Connected (Primary)'. This should happen after a configurable stability delay to prevent flapping."}, {'criteria_id': 'AC-004', 'scenario': 'Error Condition: Attempt to save an invalid configuration', 'scenario_type': 'Error_Condition', 'given': 'I am configuring a redundant server pair', 'when': 'I enter a malformed endpoint URL for either the Primary or Backup server and attempt to save', 'then': 'The UI displays a clear validation error message next to the invalid field, and the configuration is not saved.', 'validation_notes': 'Test with various invalid inputs like incorrect protocols, missing hostnames, etc. Ensure the error message is user-friendly.'}, {'criteria_id': 'AC-005', 'scenario': 'Edge Case: Both primary and backup servers are unavailable', 'scenario_type': 'Edge_Case', 'given': 'A redundant server pair is configured', 'when': 'The Primary server is unavailable, and the subsequent connection attempt to the Backup server also fails', 'then': "The system logs the connection failure for both servers, the UI displays the logical connection status as 'Disconnected' or 'Error', and the system continues to periodically check both servers for availability, prioritizing the Primary.", 'validation_notes': 'Ensure the system does not get stuck in a rapid retry loop. The health checks should occur at the configured interval.'}, {'criteria_id': 'AC-006', 'scenario': 'System Logging and Alerting on Failover', 'scenario_type': 'Happy_Path', 'given': 'A failover or failback event occurs', 'when': 'The active server connection changes from Primary to Backup or vice-versa', 'then': 'A structured log entry is created in the audit trail detailing the event, timestamp, source server, and destination server, as required by REQ-FR-011.', 'validation_notes': "Check the audit log for a specific, filterable event type for 'OPC Redundancy Switch'. This event is the trigger for US-024."}], 'user_interface_requirements': {'ui_elements': ["A section in the OPC connection configuration for 'Redundancy Settings'.", "Input fields for 'Primary Server Endpoint' and 'Backup Server Endpoint'.", "Input field for 'Health Check Interval (seconds)' for the inactive server.", "Dropdown/options for 'Failover Trigger Conditions' (e.g., Connection Loss, Bad Server Status).", "Input field for 'Failback Stability Delay (seconds)' to prevent flapping.", "A status indicator on the main dashboard for the logical connection, showing 'Connected (Primary)', 'Connected (Backup)', or 'Disconnected'."], 'user_interactions': ['User can add/edit/delete redundant pair configurations.', 'Configuration form must provide inline validation for endpoint formats and numeric inputs.'], 'display_requirements': ['The list of OPC connections should clearly distinguish redundant pairs from single connections.', 'The current active server (Primary or Backup) for a redundant connection must be clearly visible.'], 'accessibility_needs': ['All form fields must have associated labels.', 'Status indicators must use color and text/icons to convey information, compliant with WCAG 2.1 AA.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'The system must prioritize connecting to the Primary server. It should only connect to the Backup if the Primary is unavailable.', 'enforcement_point': 'During initial connection and during failback health checks.', 'violation_handling': 'N/A - Core logic.'}, {'rule_id': 'BR-002', 'rule_description': "To prevent 'connection flapping', the system must wait for a configurable stability period (e.g., 60 seconds) after the Primary server becomes available before attempting to failback.", 'enforcement_point': 'In the failover state machine before initiating a failback.', 'violation_handling': 'N/A - Core logic.'}, {'rule_id': 'BR-003', 'rule_description': 'Upon a successful failover, all existing data subscriptions from the previous active session must be re-created on the new active server.', 'enforcement_point': 'Immediately after a successful connection to the new server (Primary or Backup).', 'violation_handling': 'If subscriptions cannot be re-created, the connection should be marked as degraded, and an error should be logged.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-018', 'dependency_reason': 'The core functionality to connect to a single OPC UA server and manage its session must be implemented before redundancy logic can be built on top of it.'}], 'technical_dependencies': ["OPC Core Client's connection management service.", 'Central configuration database to store redundancy settings.', 'System-wide logging and alerting service (for REQ-FR-011).'], 'data_dependencies': [], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['Failover detection and connection attempt to the backup server should initiate within 5 seconds of the primary connection loss.', 'The health checking mechanism for the inactive server must have minimal performance impact on the active data collection process.'], 'security': ['Connection details for both primary and backup servers, including credentials, must be stored securely encrypted at rest.'], 'usability': ["The configuration process should be intuitive for an Engineer, with clear labels and help text for parameters like 'Failback Stability Delay'."], 'accessibility': ['UI must adhere to WCAG 2.1 Level AA standards.'], 'compatibility': ['The redundancy logic must be compatible with any OPC UA compliant server.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires implementing a robust state machine to manage connection states (ConnectedPrimary, ConnectedBackup, FailingOver, etc.).', 'Managing the re-subscription of potentially thousands of monitored items seamlessly during failover is complex.', 'Logic to prevent connection flapping adds complexity to the failback process.', 'Requires careful management of background tasks for health checking.'], 'technical_risks': ['Different OPC server vendors might have slightly different behaviors regarding session timeouts and status reporting, which could affect the reliability of failover triggers.', 'A race condition could occur if a failover and failback trigger happen in rapid succession.'], 'integration_points': ['OPC Core Client connection manager.', "Central Management Plane's configuration API.", "System's central logging and audit trail service.", "System's alerting service (to trigger notifications for US-024)."]}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify successful configuration saving and loading.', 'Simulate primary server shutdown and verify failover.', 'Simulate primary server restart and verify failback.', "Simulate both servers being down and verify correct 'Disconnected' state.", 'Test UI validation with incorrect endpoint formats.'], 'test_data_needs': ['Valid connection endpoints for two separate OPC UA test server instances.', 'A list of OPC tags to use for testing subscription re-creation.'], 'testing_tools': ['xUnit/Moq for backend unit tests.', 'A controllable OPC UA test server (e.g., Prosys Simulation Server) that can be started/stopped programmatically for integration tests.', 'Playwright for E2E UI testing.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit test coverage for the state machine logic is above 85%', 'Integration tests for failover and failback scenarios are implemented and passing', 'User interface for configuration is implemented and approved by UX/Product Owner', 'Performance impact of health checks is measured and deemed acceptable', 'Security review of credential storage is complete', 'User documentation explaining how to configure redundancy is created', 'Story deployed and verified in the staging environment against two independent OPC servers'], 'planning_information': {'story_points': '8', 'priority': 'High', 'sprint_considerations': ['Requires a dedicated testing environment with two controllable OPC server instances.', 'This story is foundational for high-availability deployments and may be a prerequisite for certain customer commitments.'], 'release_impact': ['This is a major feature enhancement for system reliability and will be a key selling point for customers in critical production environments.']}}