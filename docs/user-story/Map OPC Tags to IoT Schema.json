{'story_metadata': {'story_id': 'US-041', 'elaboration_date': '2025-01-24', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Map OPC Tags to IoT Schema', 'as_a_user_story': "As an Engineer, I want to visually map OPC tags to a target IoT platform's data schema and apply transformations, so that I can ensure operational data is sent to the cloud in a structured and usable format for analysis and integration with other services.", 'user_persona': 'Engineer, as defined in REQ-USR-001. This user is responsible for system configuration, including data sources and integrations.', 'business_value': 'Enables seamless integration with major cloud IoT platforms (AWS, Azure, Google Cloud), a key system feature (REQ-FR-017). This reduces the need for custom integration code, saving customers time and money, and ensures data sent to the cloud is structured, consistent, and immediately usable.', 'functional_area': 'Data Integration and Management', 'story_theme': 'Cloud IoT Platform Integration'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Happy Path: Create and save a simple 1-to-1 mapping', 'scenario_type': 'Happy_Path', 'given': 'I am an authenticated Engineer on the IoT Platform Integration configuration page for a specific, configured IoT connection (e.g., AWS IoT)', 'when': "I select an OPC tag (e.g., 'Site.Area.Machine.Temperature') as a source and specify a target JSON path (e.g., 'telemetry.temp_celsius') in the destination schema", 'then': 'The system allows me to save this mapping rule. Upon saving, the rule becomes active and is listed in the active mappings for that IoT connection.', 'validation_notes': 'Verify the mapping rule is persisted in the database. In a subsequent data flow, check that a value from the source tag is published to the IoT endpoint with the correct JSON structure.'}, {'criteria_id': 'AC-002', 'scenario': 'Happy Path: Preview a mapping with live data', 'scenario_type': 'Happy_Path', 'given': 'I have defined a mapping rule, and the source OPC tag has a live value (e.g., 25.5)', 'when': "I click the 'Preview Transformation' button for that rule", 'then': "A modal or side panel appears showing the source data (e.g., `{'tag': 'Site.Area.Machine.Temperature', 'value': 25.5}`) and the transformed JSON output (e.g., `{'telemetry': {'temp_celsius': 25.5}}`).", 'validation_notes': 'Test that the preview function correctly fetches the latest tag value and applies the defined mapping logic to generate an accurate output representation.'}, {'criteria_id': 'AC-003', 'scenario': 'Happy Path: Use asset context in a mapping', 'scenario_type': 'Happy_Path', 'given': "An OPC tag is associated with an asset named 'Pump-01' in the Asset Hierarchy (REQ-FR-021)", 'when': "I create a mapping rule and select 'asset.name' as a source value and map it to the 'deviceId' field in the target schema", 'then': "The preview and the actual data sent to the IoT platform should contain `{'deviceId': 'Pump-01'}`.", 'validation_notes': 'This requires the asset hierarchy to be populated. Verify that asset properties are available as mapping sources and are correctly resolved at runtime.'}, {'criteria_id': 'AC-004', 'scenario': 'Alternative Flow: Apply a mathematical transformation', 'scenario_type': 'Alternative_Flow', 'given': 'I am mapping a temperature tag with a value in Celsius (e.g., 20)', 'when': "I apply a transformation function `(value * 1.8) + 32` to the source value and map the result to a target field 'telemetry.temp_fahrenheit'", 'then': "The preview and actual data sent should show the correctly converted value (e.g., `{'telemetry': {'temp_fahrenheit': 68}}`).", 'validation_notes': 'Test the expression evaluation engine with various valid mathematical and type casting functions.'}, {'criteria_id': 'AC-005', 'scenario': 'Error Condition: Attempt to save an incomplete mapping', 'scenario_type': 'Error_Condition', 'given': 'I am creating a new mapping rule', 'when': 'I specify a source tag but leave the target field empty and attempt to save', 'then': "The system must display a clear validation error message (e.g., 'Target field is required') and must not save the invalid rule.", 'validation_notes': 'Check for frontend and backend validation on the mapping rule model.'}, {'criteria_id': 'AC-006', 'scenario': 'Error Condition: Runtime transformation failure', 'scenario_type': 'Error_Condition', 'given': "A mapping expects a numeric value but the source OPC tag provides a string that cannot be cast to a number (e.g., 'ERROR')", 'when': 'The system attempts to process and transform this data point', 'then': 'The transformation fails, the error is logged with details (mapping rule ID, source value, error message), and the message is not sent to the primary IoT endpoint. Optionally, it is routed to a dead-letter queue.', 'validation_notes': 'Verify that the data processing pipeline has robust error handling for transformations and that failures are logged correctly as per REQ-MON-001.'}, {'criteria_id': 'AC-007', 'scenario': 'Edge Case: Source OPC tag is deleted', 'scenario_type': 'Edge_Case', 'given': "An active mapping rule exists for the tag 'Site.Area.Machine.Pressure'", 'when': "An Engineer deletes the 'Site.Area.Machine.Pressure' tag from the system configuration", 'then': "The mapping rule in the UI is visually flagged as 'Orphaned' or 'Invalid', and a system-level alert is generated for the Administrator.", 'validation_notes': 'This requires a consistency check mechanism that runs when tags are modified or deleted.'}], 'user_interface_requirements': {'ui_elements': ["A two-panel interface: 'Sources' on the left, 'Destination Schema' on the right.", 'Source panel lists available OPC tags and contextual asset properties (e.g., asset.name, asset.id).', 'Destination panel displays the JSON structure for the target IoT platform.', 'A list of saved mapping rules for the current IoT connection.', "Buttons for 'Add New Rule', 'Save', 'Delete', and 'Preview Transformation'.", 'Input fields for source/destination paths and a text area for transformation expressions.'], 'user_interactions': ['Users can drag-and-drop a source tag/property onto a destination field to create a basic mapping.', 'Users can click on a mapping rule to edit its details.', 'A searchable/filterable list of available transformation functions should be provided.'], 'display_requirements': ['The UI must clearly indicate the status of each mapping rule (e.g., Active, Incomplete, Orphaned).', 'Validation errors must be displayed inline next to the problematic field.'], 'accessibility_needs': ['All UI controls must be keyboard accessible.', 'The interface must comply with WCAG 2.1 Level AA standards, as per REQ-IFC-001.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'A single source OPC tag can be mapped to multiple fields in the destination schema.', 'enforcement_point': 'Mapping configuration UI and validation logic.', 'violation_handling': 'N/A - This is a permissive rule.'}, {'rule_id': 'BR-002', 'rule_description': 'A single destination field can only be mapped from one source/transformation.', 'enforcement_point': 'Mapping configuration UI and validation logic.', 'violation_handling': 'The UI should prevent creating a second mapping to an already-mapped destination field and show an error message.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-040', 'dependency_reason': 'Cannot create a mapping without first configuring the target IoT platform connection.'}, {'story_id': 'US-026', 'dependency_reason': 'Required to enable the use of asset properties (e.g., asset.name) as a source in mappings. The core feature can proceed without this, but contextual mapping cannot.'}, {'story_id': 'US-001', 'dependency_reason': 'The system must be able to browse and list available OPC tags to be selected as mapping sources.'}], 'technical_dependencies': ['A robust expression evaluation or JSON transformation library (e.g., NCalc, Jint, or JSONata) must be selected and integrated into the backend data processing service.', 'A defined mechanism for representing or discovering the schema of target IoT platforms.'], 'data_dependencies': ['Requires access to the list of configured OPC tags and the asset hierarchy model.'], 'external_dependencies': ['Depends on the APIs of the target cloud IoT platforms (AWS, Azure, Google Cloud) for sending the transformed data.']}, 'non_functional_requirements': {'performance': ['The transformation logic must be highly optimized. The P99 latency added by the mapping and transformation step should be less than 10ms per message to support the overall system performance goals (REQ-NFR-001).'], 'security': ['Any user-defined transformation expressions must be sanitized and executed in a sandboxed environment to prevent code injection or denial-of-service attacks.'], 'usability': ['The mapping tool should be intuitive enough for an Engineer to create a moderately complex mapping with transformations in under 5 minutes without consulting documentation.'], 'accessibility': ['The UI must adhere to WCAG 2.1 Level AA standards (REQ-IFC-001).'], 'compatibility': ['The mapping tool UI must function correctly on all supported browsers (Chrome, Firefox, Edge, Safari) as per REQ-ENV-001.']}, 'implementation_considerations': {'complexity_assessment': 'High', 'complexity_factors': ['The UI for a visual, drag-and-drop mapping tool is complex to build and test.', 'Selection and secure implementation of a transformation/expression engine is a critical and non-trivial task.', 'Handling schema variations and authentication methods for multiple target IoT platforms adds significant backend complexity.', "Ensuring high performance and low latency in the data pipeline's hot path."], 'technical_risks': ['The chosen transformation library may have performance limitations or security vulnerabilities.', 'Poor UI design could make the tool difficult to use, defeating its purpose.', 'Schema drift in target IoT platforms could break existing mappings.'], 'integration_points': ['Backend: Integrates with the data ingestion pipeline, reading from the message queue and writing to the external IoT platform client.', 'Backend: Integrates with the configuration database to store and retrieve mapping rules.', 'Frontend: Integrates with APIs that provide lists of OPC tags, assets, and IoT connections.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E', 'Performance', 'Security'], 'test_scenarios': ['Create, read, update, and delete (CRUD) operations for mapping rules.', 'End-to-end data flow from a mock OPC server to a mock IoT endpoint with various transformations applied.', 'Validation of user input and error handling in the UI.', 'Load testing the transformation service to measure throughput and latency.', 'Security testing of the expression evaluation engine for injection vulnerabilities.'], 'test_data_needs': ['A set of predefined OPC tags with different data types (integer, float, boolean, string).', 'A sample asset hierarchy.', 'Mock destination schemas for AWS IoT, Azure IoT, and Google Cloud IoT.'], 'testing_tools': ['Playwright for E2E UI testing.', 'xUnit/Moq for backend unit/integration testing.', 'k6 or similar for performance testing the transformation service API.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least two peers', 'Unit and integration tests implemented with >80% code coverage for new logic', 'E2E tests for creating and executing a mapping are passing', 'Performance testing confirms the transformation service meets latency requirements', 'Security review of the expression engine is complete and any findings are remediated', 'User documentation for the IoT mapping tool is written and published', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '13', 'priority': 'High', 'sprint_considerations': ['This is a large story that could be broken down. A potential split: 1) Implement backend and simple 1-to-1 mapping UI. 2) Add transformation engine and expression support. 3) Add asset context support.', 'Requires both frontend and backend development effort, with a significant portion on the frontend UI.'], 'release_impact': ['This feature is a cornerstone of the cloud integration capability and is critical for marketing the product as a bridge between OT and IT systems. It will likely be a major feature in the release notes.']}}